import pynautobot
import requests
from collections import Counter
from decouple import config

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')


def get_nautobot_api():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç pynautobot —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    """
    api = pynautobot.api(
        NAUTOBOT_URL,
        token=NAUTOBOT_TOKEN,
        verify=False,
    )
    adapter = requests.adapters.HTTPAdapter(
        pool_connections=1000,
        pool_maxsize=1000
    )
    api.http_session.mount('http://', adapter)
    api.http_session.mount('https://', adapter)
    api.http_session.verify = False
    return api


def get_vrf_details(api, vrf):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VRF: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    device_assignments = api.ipam.vrf_device_assignments.filter(vrf=vrf.id)
    devices = []
    for assignment in device_assignments:
        device = api.dcim.devices.get(id=assignment.device.id)
        devices.append(device.name)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ VRF
    prefix_assignments = api.ipam.prefix_vrf_assignments.filter(vrf=vrf.id)
    prefix_list = []
    for assignment in prefix_assignments:
        prefix = api.ipam.prefixes.get(id=assignment.prefix.id)
        prefix_list.append(str(prefix.prefix))
    
    return {
        'devices': devices,
        'prefixes': prefix_list,
        'device_count': len(devices),
        'prefix_count': len(prefix_list)
    }


def find_duplicate_vrfs():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ VRF —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (3+ —Ä–∞–∑–∞) –≤ Nautobot –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ, —á—Ç–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–æ–∫
    """
    print("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Nautobot...")
    api = get_nautobot_api()
    
    print("–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ VRF...")
    all_vrfs = api.ipam.vrfs.all()
    
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ VRF: {len(all_vrfs)}")
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ VRF –ø–æ –∏–º–µ–Ω–∞–º
    vrf_names = [vrf.name for vrf in all_vrfs]
    name_counts = Counter(vrf_names)
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏ (3+ —Ä–∞–∑–∞)
    problem_duplicates = {name: count for name, count in name_counts.items() if count >= 3}
    
    # –°—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ 2 —Ä–∞–∑–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    two_duplicates = {name: count for name, count in name_counts.items() if count == 2}
    
    print(f"\n–î—É–±–ª–µ–π —Å 2 –≤—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): {len(two_duplicates)}")
    
    if not problem_duplicates:
        print("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö VRF (3+ —Ä–∞–∑–∞) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(problem_duplicates)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω VRF (3+ —Ä–∞–∑–∞):")
    print("=" * 80)
    
    total_problem_vrfs = 0
    deleted_vrfs = 0
    
    for vrf_name, count in problem_duplicates.items():
        print(f"\nüî¥ VRF '{vrf_name}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑:")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ VRF —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º
        duplicate_vrfs = [vrf for vrf in all_vrfs if vrf.name == vrf_name]
        total_problem_vrfs += len(duplicate_vrfs)
        
        vrfs_with_devices = 0
        vrfs_with_prefixes = 0
        vrfs_to_delete = []
        
        for i, vrf in enumerate(duplicate_vrfs, 1):
            print(f"\n  {i}. ID: {vrf.id}")
            print(f"     RD: {vrf.rd or 'None'}")
            print(f"     Description: {vrf.description or 'None'}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = get_vrf_details(api, vrf)
            
            if details['device_count'] > 0:
                vrfs_with_devices += 1
                print(f"     ‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º ({details['device_count']}): {', '.join(details['devices'])}")
            else:
                print(f"     ‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º")
            
            if details['prefix_count'] > 0:
                vrfs_with_prefixes += 1
                print(f"     ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã ({details['prefix_count']}): {', '.join(details['prefixes'][:5])}")
                if details['prefix_count'] > 5:
                    print(f"        ... –∏ –µ—â–µ {details['prefix_count'] - 5} –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤")
            else:
                print(f"     ‚ùå –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º - –ø–æ–º–µ—á–∞–µ–º –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            if details['device_count'] == 0 and details['prefix_count'] == 0:
                vrfs_to_delete.append(vrf)
                print(f"     üóëÔ∏è  –ü–û–ú–ï–ß–ï–ù –ù–ê –£–î–ê–õ–ï–ù–ò–ï (–Ω–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫)")
        
        # –£–¥–∞–ª—è–µ–º VRF –±–µ–∑ –ø—Ä–∏–≤—è–∑–æ–∫
        for vrf in vrfs_to_delete:
            try:
                print(f"     üóëÔ∏è  –£–¥–∞–ª—è–µ–º VRF ID: {vrf.id}")
                vrf.delete()
                deleted_vrfs += 1
                print(f"     ‚úÖ VRF ID: {vrf.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ VRF ID: {vrf.id}: {e}")
        
        remaining_count = count - len(vrfs_to_delete)
        print(f"\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ VRF '{vrf_name}':")
        print(f"     - –í—Å–µ–≥–æ –¥—É–±–ª–µ–π –±—ã–ª–æ: {count}")
        print(f"     - –£–¥–∞–ª–µ–Ω–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–æ–∫: {len(vrfs_to_delete)}")
        print(f"     - –û—Å—Ç–∞–ª–æ—Å—å: {remaining_count}")
        print(f"     - –° –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º: {vrfs_with_devices}")
        print(f"     - –° –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏: {vrfs_with_prefixes}")
        
        print("-" * 80)
    
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ VRF –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_vrfs)}")
    print(f"–î—É–±–ª–µ–π —Å 2 –≤—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ (–Ω–æ—Ä–º–∞): {len(two_duplicates)} –∏–º–µ–Ω = {len(two_duplicates) * 2} VRF")
    print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥—É–±–ª–µ–π (3+ —Ä–∞–∑–∞): {len(problem_duplicates)} –∏–º–µ–Ω = {total_problem_vrfs} VRF")
    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ VRF –±–µ–∑ –ø—Ä–∏–≤—è–∑–æ–∫: {deleted_vrfs}")
    print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö VRF: {total_problem_vrfs - deleted_vrfs}")
    
    if deleted_vrfs > 0:
        print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_vrfs} VRF –±–µ–∑ –ø—Ä–∏–≤—è–∑–æ–∫.")
    else:
        print(f"\n‚ö†Ô∏è  –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ VRF –∏–º–µ—é—Ç –ø—Ä–∏–≤—è–∑–∫–∏ - —Ä—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


if __name__ == "__main__":
    find_duplicate_vrfs()
