import time
import logging
import concurrent.futures
import re
import socket

import urllib3
import requests
from decouple import config
from ntc_templates.parse import parse_output
from netmiko import ConnectHandler
import pynautobot

# Отключаем предупреждения InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Константы из окружения
HPNA_LOGIN = config('HPNA_LOGIN')
HPNA_PASSWORD = config('HPNA_PASSWORD')
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')

# Логгер
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s'
)
logger = logging.getLogger(__name__)


def netmiko_connect(nautobot_device, device_type):
    """Создает подключение к сетевому устройству через Netmiko."""
    netmiko_device = {
        'device_type': device_type,
        'host': str(nautobot_device.primary_ip4)[:-3:],
        'username': config('HPNA_LOGIN'),
        'password': config('HPNA_PASSWORD'),
        'timeout': 200,
        'port': 22,
        "global_delay_factor": 2,
        'conn_timeout': 200
    }

    try:
        net_connect = ConnectHandler(**netmiko_device)
    except Exception as error:
        try:
            net_connect = ConnectHandler(**netmiko_device)
        except Exception as error:
            logger.error(f"Connection error {nautobot_device}")
            return None

    return net_connect


def nautobot_connection():
    """Возвращает клиент pynautobot с увеличенным пулом соединений."""
    api = pynautobot.api(
        NAUTOBOT_URL,
        token=NAUTOBOT_TOKEN,
        verify=False,
    )
    adapter = requests.adapters.HTTPAdapter(
        pool_connections=1000,
        pool_maxsize=1000
    )
    api.http_session.mount('http://', adapter)
    api.http_session.mount('https://', adapter)
    api.http_session.verify = False
    return api


def format_mac_address(mac_address):
    """Преобразует MAC-адрес в формат aa-bb-cc-dd-ee-ff."""
    mac_parts = mac_address.split('.')
    mac_joined = ''.join(mac_parts)
    blocks = [mac_joined[x:x + 2] for x in range(0, len(mac_joined), 2)]
    return '-'.join(blocks)


def get_dns_name(ip_address):
    """Получает DNS имя для IP-адреса."""
    try:
        dns_name, alias, address_list = socket.gethostbyaddr(ip_address)
        return re.sub(r'[#*\s\[\]\"]', '', dns_name)
    except Exception:
        return ''


def create_ip_address_in_nautobot_global(nautobot_api, arp_entry, dns_name, device_name):
    """Создает IP-адрес в глобальной таблице Nautobot."""
    ip_address = f"{arp_entry['address']}/32"

    try:
        nautobot_api.ipam.ip_addresses.create([{
            "address": ip_address,
            "custom_fields": {
                "mac_address": arp_entry['mac']
            },
            "dns_name": dns_name,
            "status": "Active",
            "namespace": "ed1a3ab7-deea-4872-b111-b44513de94a8"
        }])
        logger.info(f"Created IP address {ip_address} in global table for device {device_name}")

    except Exception as error:
        logger.warning(f"Failed to create IP {ip_address} in global table for device {device_name}: {error}")


def process_global_arp_table(net_connect, nautobot_device, nautobot_api, platform):
    """Обрабатывает глобальную ARP таблицу устройства."""
    try:
        logger.info(f"Processing global ARP table for device {nautobot_device.name}")

        # Получаем глобальную ARP-таблицу с устройства
        output = net_connect.send_command('show ip arp', read_timeout=200)
        device_arp = parse_output(platform=platform, command='show ip arp', data=output)

        logger.info(f"Found {len(device_arp)} ARP entries in global table for device {nautobot_device.name}")

        # Форматируем MAC-адреса
        for arp_entry in device_arp:
            arp_entry['mac'] = format_mac_address(arp_entry['mac'])

        # Обрабатываем каждую ARP запись
        processed_count = 0
        created_count = 0
        
        for arp_entry in device_arp:
            # Список служебных IP-адресов для пропуска
            skip_list = [
                '192.168.0.0', '192.168.0.1', '192.168.0.2',
                '192.168.0.3', '192.168.0.4', '192.168.0.5',
                '192.168.0.6'
            ]

            # Пропускаем служебные IP-адреса
            if any(sub in arp_entry['address'] for sub in skip_list):
                continue

            # Пропускаем неполные MAC-адреса
            if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                continue

            processed_count += 1
            ip_with_mask = f"{arp_entry['address']}/32"

            # Проверяем существование IP через индивидуальный GET запрос
            try:
                existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_with_mask)
                if existing_ip:
                    logger.debug(f"IP {ip_with_mask} already exists in Nautobot, skipping")
                    continue
            except Exception:
                # IP не найден, можно создавать
                pass

            # Получаем DNS имя
            dns_name = get_dns_name(arp_entry['address'])

            # Создаем IP-адрес
            create_ip_address_in_nautobot_global(nautobot_api, arp_entry, dns_name, nautobot_device.name)
            created_count += 1

        logger.info(f"Global ARP processing for {nautobot_device.name}: processed {processed_count} entries, created {created_count} new IPs")

    except Exception as error:
        logger.error(f'Error processing global ARP table for device {nautobot_device.name}: {error}')


def get_ips_in_vrf(nautobot_api, vrf_id, vrf_name):
    """Получает IP-адреса в VRF через GraphQL."""
    try:
        query = f"""
        query GetVRFPrefixes {{
            vrf(id: "{vrf_id}") {{
                id
                name
                prefixes {{
                    id
                    prefix
                    ip_addresses {{
                        address
                    }}
                }}
            }}
        }}
        """

        #logger.info(f"VRF {vrf_name}: executing GraphQL query")
        result = nautobot_api.graphql.query(query=query)

        # Используем json атрибут GraphQLRecord
        if not hasattr(result, 'json') or not result.json:
            logger.warning(f"VRF {vrf_name}: no json in GraphQL result")
            raise Exception("No JSON in GraphQL result")

        data = result.json.get('data', {})
        vrf_data = data.get('vrf', {})
        prefixes = vrf_data.get('prefixes', [])

        if not prefixes:
            #logger.warning(f"VRF {vrf_name}: no prefixes found")
            raise Exception("No prefixes found")

        # Собираем IP-адреса из префиксов VRF
        vrf_ips = []
        prefix_count = 0

        for prefix in prefixes:
            prefix_count += 1
            ip_addresses = prefix.get('ip_addresses', [])
            for ip in ip_addresses:
                address = ip.get('address')
                if address:
                    vrf_ips.append(address)

        # Дедупликация IP-адресов
        vrf_ips = list(set(vrf_ips))

        #logger.info(f"VRF {vrf_name}: found {prefix_count} prefixes, {len(vrf_ips)} IP addresses via GraphQL")
        return vrf_ips

    except Exception as error:
        #logger.warning(f"GraphQL failed for VRF {vrf_name}: {error}")
        return get_ips_in_vrf_fallback(nautobot_api, vrf_id, vrf_name)


def get_ips_in_vrf_fallback(nautobot_api, vrf_id, vrf_name):
    """
    Fallback метод через REST API для случаев, когда GraphQL не работает.
    """
    try:
        # Получаем ВСЕ assignments и фильтруем вручную (обходной путь для бага API)
        all_assignments = nautobot_api.ipam.vrf_prefix_assignments.all()
        vrf_assignments = [a for a in all_assignments if a.vrf.id == vrf_id]

        # Дедупликация префиксов (убираем дублированные assignments)
        prefix_ids = list(set([a.prefix.id for a in vrf_assignments]))

        logger.debug(f"VRF {vrf_name}: found {len(prefix_ids)} prefixes via REST fallback")

        # Собираем все IP сначала, дедуплицируем в конце
        vrf_ips = []
        for prefix_id in prefix_ids:
            try:
                ip_addresses = nautobot_api.ipam.ip_addresses.filter(parent=prefix_id)
                vrf_ips.extend([ip.address for ip in ip_addresses])
            except Exception as prefix_error:
                logger.error(f"Error processing prefix {prefix_id}: {prefix_error}")

        # Дедупликация IP-адресов один раз в конце
        vrf_ips = list(set(vrf_ips))

        logger.debug(f"VRF {vrf_name}: total {len(vrf_ips)} IP addresses via REST fallback")
        return vrf_ips

    except Exception as error:
        logger.error(f"REST fallback error for VRF {vrf_name}: {error}")
        return []


def handle_existing_ip_error(nautobot_api, ip_address, vrf_id):
    """
    Обрабатывает ошибку существующего IP-адреса.
    Добавляет VRF к префиксу, если его там нет.
    """
    try:
        # Находим существующий IP-адрес
        existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_address)
        if not existing_ip:
            logger.error(f"Cannot find existing IP {ip_address}")
            return False

        if not existing_ip.parent:
            logger.error(f"IP {ip_address} has no parent prefix")
            return False

        prefix_id = existing_ip.parent.id

        # Проверяем, есть ли уже нужный VRF у префикса
        existing_vrf_assignments = nautobot_api.ipam.vrf_prefix_assignments.filter(prefix=prefix_id)
        existing_vrf_ids = [assignment.vrf.id for assignment in existing_vrf_assignments]

        if vrf_id not in existing_vrf_ids:
            # Добавляем VRF к префиксу
            nautobot_api.ipam.vrf_prefix_assignments.create(
                prefix=prefix_id,
                vrf=vrf_id
            )
            logger.info(f"Added VRF {vrf_id} to prefix {existing_ip.parent.prefix}")
        else:
            logger.info(f"VRF {vrf_id} already assigned to prefix {existing_ip.parent.prefix}")

        return True

    except Exception as error:
        logger.error(f"Error handling existing IP {ip_address}: {error}")
        return False


def create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name, device_name):
    """Создает IP-адрес в Nautobot с обработкой конфликтов."""
    ip_address = f"{arp_entry['address']}/32"

    # Дополнительная проверка существования IP перед созданием
    try:
        existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_address)
        if existing_ip:
            logger.warning(
                f"IP {ip_address} already exists but wasn't found in VRF {vrf_name} check for device {device_name}")
            # Пытаемся исправить VRF assignment
            handle_existing_ip_error(nautobot_api, ip_address, vrf_id)
            return
    except Exception:
        # IP не существует, можно создавать
        pass

    try:
        nautobot_api.ipam.ip_addresses.create([{
            "address": ip_address,
            "custom_fields": {
                "mac_address": arp_entry['mac']
            },
            "dns_name": dns_name,
            "status": "Active",
            "namespace": "ed1a3ab7-deea-4872-b111-b44513de94a8"
        }])
        logger.debug(f"Created IP address {ip_address} for device {device_name}")

    except Exception as error:
        logger.warning(f"Failed to create IP {ip_address} for device {device_name}: {error}")

        # Пытаемся обработать конфликт VRF
        if "already exists" in str(error).lower():
            if handle_existing_ip_error(nautobot_api, ip_address, vrf_id):
                logger.info(f"VRF conflict resolved for IP {ip_address}, device {device_name}")
            else:
                logger.error(f"Could not resolve VRF conflict for IP {ip_address}, device {device_name}")
        else:
            logger.error(f"Unexpected error creating IP {ip_address} for device {device_name}: {error}")


def create_arp_nautobot_on_cisco_ios(nautobot_device, nautobot_api):
    """Обрабатывает ARP записи для устройств Cisco IOS."""
    net_connect = netmiko_connect(nautobot_device, 'cisco_ios')

    if not net_connect:
        return

    try:
        # НОВАЯ ЛОГИКА: Обрабатываем только глобальную ARP таблицу
        process_global_arp_table(net_connect, nautobot_device, nautobot_api, 'cisco_ios')

        # ЗАКОММЕНТИРОВАННАЯ СТАРАЯ ЛОГИКА ДЛЯ VRF
        # device_vrfs = nautobot_api.ipam.vrfs.filter(device=nautobot_device.id)
        # existing_vrf_in_device = {vrf.name: vrf.id for vrf in device_vrfs}

        # for vrf_name, vrf_id in existing_vrf_in_device.items():
        #     logger.info(f"Processing VRF {vrf_name} for device {nautobot_device.name}")

        #     # Получаем IP-адреса в VRF
        #     nautobot_device_arp = get_ips_in_vrf(nautobot_api, vrf_id, vrf_name)

        #     # Получаем ARP-таблицу с устройства
        #     output = net_connect.send_command(f'show ip arp vrf {vrf_name}', read_timeout=200)
        #     device_arp = parse_output(platform='cisco_ios', command='show ip arp', data=output)

        #     # Форматируем MAC-адреса
        #     for arp_entry in device_arp:
        #         arp_entry['mac'] = format_mac_address(arp_entry['mac'])

        #     # Обрабатываем каждую ARP запись
        #     for arp_entry in device_arp:
        #         skip_list = [
        #             '192.168.0.0', '192.168.0.1', '192.168.0.2',
        #             '192.168.0.3', '192.168.0.4', '192.168.0.5',
        #             '192.168.0.6'
        #         ]

        #         # Пропускаем служебные IP-адреса
        #         if any(sub in arp_entry['address'] for sub in skip_list):
        #             continue

        #         # Пропускаем неполные MAC-адреса
        #         if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
        #             continue

        #         # Получаем DNS имя
        #         dns_name = get_dns_name(arp_entry['address'])

        #         # Создаем IP-адрес, если его нет в VRF
        #         ip_with_mask = f"{arp_entry['address']}/32"
        #         if ip_with_mask not in nautobot_device_arp:
        #             create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name,
        #                                           nautobot_device.name)

        net_connect.disconnect()
        logger.info(f'Completed processing device {nautobot_device.name}')

    except Exception as error:
        logger.error(f'Error processing device {nautobot_device.name}: {error}')


def create_arp_nautobot_on_cisco_nxos(nautobot_device, nautobot_api):
    """Обрабатывает ARP записи для устройств Cisco NXOS."""
    net_connect = netmiko_connect(nautobot_device, 'cisco_nxos')

    if not net_connect:
        return

    try:
        # НОВАЯ ЛОГИКА: Обрабатываем только глобальную ARP таблицу
        process_global_arp_table(net_connect, nautobot_device, nautobot_api, 'cisco_nxos')

        # ЗАКОММЕНТИРОВАННАЯ СТАРАЯ ЛОГИКА ДЛЯ VRF
        # device_vrfs = nautobot_api.ipam.vrfs.filter(device=nautobot_device.id)
        # existing_vrf_in_device = {vrf.name: vrf.id for vrf in device_vrfs}

        # for vrf_name, vrf_id in existing_vrf_in_device.items():
        #     logger.info(f"Processing VRF {vrf_name} for device {nautobot_device.name}")

        #     # Получаем IP-адреса в VRF
        #     nautobot_device_arp = get_ips_in_vrf(nautobot_api, vrf_id, vrf_name)

        #     # Получаем ARP-таблицу с устройства
        #     output = net_connect.send_command(f'show ip arp vrf {vrf_name}', read_timeout=200)
        #     device_arp = parse_output(platform='cisco_nxos', command='show ip arp', data=output)

        #     # Форматируем MAC-адреса
        #     for arp_entry in device_arp:
        #         arp_entry['mac'] = format_mac_address(arp_entry['mac'])

        #     # Обрабатываем каждую ARP запись
        #     for arp_entry in device_arp:
        #         # Пропускаем неполные MAC-адреса
        #         if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
        #             continue

        #         # Получаем DNS имя
        #         dns_name = get_dns_name(arp_entry['address'])

        #         # Создаем IP-адрес, если его нет в VRF
        #         ip_with_mask = f"{arp_entry['address']}/32"
        #         if ip_with_mask not in nautobot_device_arp:
        #             create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name,
        #                                           nautobot_device.name)

        net_connect.disconnect()
        logger.info(f'Completed processing device {nautobot_device.name}')

    except Exception as error:
        logger.error(f'Error processing device {nautobot_device.name}: {error}')


def add_arp_entry_to_nautobot():
    """Основная функция для добавления ARP записей в Nautobot."""
    start_time = time.time()
    api = nautobot_connection()

    # Строим мапу тегов
    all_tags = list(api.extras.tags.all())
    tag_map = {tag.id: tag.name for tag in all_tags}

    # Фильтруем нужные устройства
    devices = list(api.dcim.devices.all())
    target_devices = []

    for device in devices:
        tag_names = [tag_map.get(tag.id) for tag in (device.tags or [])]
        if 'raif_scripts' in tag_names:
            target_devices.append(device)

    logger.info(f"Found {len(target_devices)} target devices")

    # Многопоточная обработка устройств
    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
        for nautobot_device in target_devices:
            if nautobot_device.platform and nautobot_device.platform.name == 'Cisco NXOS':
                executor.submit(
                    create_arp_nautobot_on_cisco_nxos,
                    nautobot_device,
                    api,
                )
            elif nautobot_device.platform and nautobot_device.platform.name == 'Cisco IOS':
                executor.submit(
                    create_arp_nautobot_on_cisco_ios,
                    nautobot_device,
                    api,
                )

    execution_time = time.time() - start_time
    logger.info(f"Script execution completed in {execution_time:.2f} seconds")


if __name__ == "__main__":
    add_arp_entry_to_nautobot()
