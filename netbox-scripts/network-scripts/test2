import time
import logging
import concurrent.futures
import re
import socket
from collections import defaultdict
from threading import Lock

import urllib3
import requests
from decouple import config
from ntc_templates.parse import parse_output
from netmiko import ConnectHandler
import pynautobot

# Отключаем предупреждения InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Константы из окружения
HPNA_LOGIN = config('HPNA_LOGIN')
HPNA_PASSWORD = config('HPNA_PASSWORD')
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')

# Логгер
logging.basicConfig(
    level=logging.WARNING,  # Показываем только WARNING и ERROR
    format='%(asctime)s %(levelname)s %(message)s'
)
logger = logging.getLogger(__name__)

# Глобальные переменные для сбора статистики
device_timings = {}
timing_lock = Lock()


def log_device_timing(device_name, operation, duration):
    """Логирует время выполнения операции для устройства."""
    with timing_lock:
        if device_name not in device_timings:
            device_timings[device_name] = {}
        device_timings[device_name][operation] = duration


def netmiko_connect_with_retry(nautobot_device, device_type, max_retries=3):
    """Создает подключение к сетевому устройству через Netmiko с retry логикой."""
    start_time = time.time()
    
    for attempt in range(max_retries):
        try:
            netmiko_device = {
                'device_type': device_type,
                'host': str(nautobot_device.primary_ip4)[:-3:],
                'username': config('HPNA_LOGIN'),
                'password': config('HPNA_PASSWORD'),
                'timeout': 300,  # Увеличено с 200
                'port': 22,
                "global_delay_factor": 3,  # Увеличено с 2
                'conn_timeout': 300,  # Увеличено с 200
                'blocking_timeout': 20,
                'keepalive': 30
            }

            net_connect = ConnectHandler(**netmiko_device)
            duration = time.time() - start_time
            log_device_timing(nautobot_device.name, 'netmiko_connect', duration)
            return net_connect

        except Exception as error:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt  # 1, 2, 4 секунды
                time.sleep(wait_time)
                continue
            else:
                duration = time.time() - start_time
                log_device_timing(nautobot_device.name, 'netmiko_connect_failed', duration)
                logger.error(f'Connection error {nautobot_device}')
                return None

    return None


def send_command_safe(connection, command, timeout=300):
    """Безопасная отправка команды с обработкой pattern detection проблем."""
    try:
        return connection.send_command(command, read_timeout=timeout)
    except Exception as error:
        if "pattern not detected" in str(error).lower():
            # Пытаемся с увеличенным таймаутом
            try:
                return connection.send_command(command, read_timeout=timeout * 2)
            except Exception:
                raise error
        else:
            raise error


def nautobot_connection():
    """Возвращает клиент pynautobot с увеличенным пулом соединений."""
    api = pynautobot.api(
        NAUTOBOT_URL,
        token=NAUTOBOT_TOKEN,
        verify=False,
    )
    adapter = requests.adapters.HTTPAdapter(
        pool_connections=1000,
        pool_maxsize=1000
    )
    api.http_session.mount('http://', adapter)
    api.http_session.mount('https://', adapter)
    api.http_session.verify = False
    return api


def format_mac_address(mac_address):
    """Преобразует MAC-адрес в формат aa-bb-cc-dd-ee-ff."""
    mac_parts = mac_address.split('.')
    mac_joined = ''.join(mac_parts)
    blocks = [mac_joined[x:x + 2] for x in range(0, len(mac_joined), 2)]
    return '-'.join(blocks)


def get_dns_name(ip_address):
    """Получает DNS имя для IP-адреса."""
    try:
        dns_name, alias, address_list = socket.gethostbyaddr(ip_address)
        return re.sub(r'[#*\s\[\]\"]', '', dns_name)
    except Exception:
        return ''


def parse_ilo_arp_output(output):
    """Парсит ARP вывод для iLO и других нестандартных устройств."""
    import re

    arp_entries = []
    lines = output.strip().split('\n')

    for i, line in enumerate(lines):
        if any(skip_word in line.lower() for skip_word in [
            'protocol', 'address', 'age', 'hardware', 'type', 'interface',
            'total number', 'static:', 'dynamic:', 'trust:', 'load for', 'time source'
        ]):
            continue

        match = re.match(r'^(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+)\s+([0-9a-fA-F.]+)\s+(\S+)(?:\s+(.*))?', line.strip())

        if match:
            protocol, address, age, mac, type_field, interface = match.groups()

            arp_entry = {
                'protocol': protocol,
                'address': address,
                'age': age,
                'mac': mac,
                'type': type_field,
                'interface': interface.strip() if interface else ''
            }
            arp_entries.append(arp_entry)

    return arp_entries


def is_empty_arp_table(output):
    """Проверяет, является ли ARP таблица пустой."""
    output_lower = output.lower()

    # Индикаторы пустой ARP таблицы
    empty_indicators = [
        'total number of entries: 0',
        'no entries found',
        'arp table is empty',
        'total entries: 0',
        '0 entries',
        'no arp entries'
    ]

    return any(indicator in output_lower for indicator in empty_indicators)


def create_ip_address_in_nautobot_global(nautobot_api, arp_entry, dns_name, device_name):
    """Создает IP-адрес в глобальной таблице Nautobot."""
    ip_address = f"{arp_entry['address']}/32"

    try:
        nautobot_api.ipam.ip_addresses.create([{
            "address": ip_address,
            "custom_fields": {
                "mac_address": arp_entry['mac']
            },
            "dns_name": dns_name,
            "description": "VRF GLOBAL",
            "status": "Active",
            "namespace": "ed1a3ab7-deea-4872-b111-b44513de94a8"
        }])

    except Exception as error:
        if "duplicate key value violates unique constraint" in str(error):
            # Race condition - другой поток уже создал IP, это нормально
            pass
        elif "No suitable parent Prefix exists" in str(error):
            logger.warning(f"No parent prefix for IP {ip_address}, device {device_name}")
        else:
            logger.warning(f"Failed to create IP {ip_address} for device {device_name}: {error}")


def process_global_arp_table(net_connect, nautobot_device, nautobot_api, platform):
    """Обрабатывает глобальную ARP таблицу устройства."""
    start_time = time.time()
    
    try:
        # Получаем глобальную ARP-таблицу с устройства
        cmd_start = time.time()
        output = send_command_safe(net_connect, 'show ip arp')
        cmd_duration = time.time() - cmd_start
        log_device_timing(nautobot_device.name, 'show_ip_arp_global', cmd_duration)
        
        # Проверяем, не пустая ли ARP таблица
        if is_empty_arp_table(output) or len(output) == 0:
            log_device_timing(nautobot_device.name, 'process_global_arp_table', time.time() - start_time)
            return

        # Пытаемся распарсить вывод стандартным шаблоном
        parse_start = time.time()
        device_arp = None
        standard_parse_error = None
        custom_parse_error = None

        try:
            device_arp = parse_output(platform=platform, command='show ip arp', data=output)
            if not device_arp:
                raise Exception("Standard parser returned empty result")
        except Exception as error:
            standard_parse_error = str(error)
            try:
                device_arp = parse_ilo_arp_output(output)
                if not device_arp:
                    custom_parse_error = "Custom parser returned empty result"
            except Exception as error:
                custom_parse_error = str(error)
        
        parse_duration = time.time() - parse_start
        log_device_timing(nautobot_device.name, 'parse_arp_global', parse_duration)
        
        if not device_arp:
            logger.error(f"Failed to parse ARP output for device {nautobot_device.name}:")
            logger.error(f"  Standard parser error: {standard_parse_error}")
            logger.error(f"  Custom parser error: {custom_parse_error}")
            logger.error(f"  First 500 chars of output: {output[:500]}")
            log_device_timing(nautobot_device.name, 'process_global_arp_table', time.time() - start_time)
            return

        # Форматируем MAC-адреса
        for arp_entry in device_arp:
            arp_entry['mac'] = format_mac_address(arp_entry['mac'])

        # Обрабатываем каждую ARP запись
        dns_count = 0
        api_checks = 0
        api_creates = 0
        
        for arp_entry in device_arp:
            # Список служебных IP-адресов для пропуска
            skip_list = [
                '192.168.0.0', '192.168.0.1', '192.168.0.2',
                '192.168.0.3', '192.168.0.4', '192.168.0.5',
                '192.168.0.6'
            ]

            # Пропускаем служебные IP-адреса
            if any(sub in arp_entry['address'] for sub in skip_list):
                continue

            # Пропускаем неполные MAC-адреса
            if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                continue

            ip_with_mask = f"{arp_entry['address']}/32"

            # Проверяем существование IP через индивидуальный GET запрос
            try:
                api_checks += 1
                existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_with_mask)
                if existing_ip is not None:
                    continue
            except Exception:
                # IP не найден, можно создавать
                pass

            # Получаем DNS имя
            dns_count += 1
            dns_name = get_dns_name(arp_entry['address'])

            # Создаем IP-адрес
            api_creates += 1
            create_ip_address_in_nautobot_global(nautobot_api, arp_entry, dns_name, nautobot_device.name)

        log_device_timing(nautobot_device.name, 'dns_lookups_global', dns_count)
        log_device_timing(nautobot_device.name, 'api_checks_global', api_checks)
        log_device_timing(nautobot_device.name, 'api_creates_global', api_creates)
        log_device_timing(nautobot_device.name, 'process_global_arp_table', time.time() - start_time)

    except Exception as error:
        logger.error(f'Error processing global ARP table for device {nautobot_device.name}: {error}')
        log_device_timing(nautobot_device.name, 'process_global_arp_table', time.time() - start_time)


def get_ips_in_vrf(nautobot_api, vrf_id, vrf_name):
    """Получает IP-адреса в VRF через GraphQL."""
    try:
        query = f"""
        query GetVRFPrefixes {{
            vrf(id: "{vrf_id}") {{
                id
                name
                prefixes {{
                    id
                    prefix
                    ip_addresses {{
                        address
                    }}
                }}
            }}
        }}
        """

        result = nautobot_api.graphql.query(query=query)

        # Используем json атрибут GraphQLRecord
        if not hasattr(result, 'json') or not result.json:
            raise Exception("No JSON in GraphQL result")

        data = result.json.get('data', {})
        vrf_data = data.get('vrf', {})
        prefixes = vrf_data.get('prefixes', [])

        if not prefixes:
            raise Exception("No prefixes found")

        # Собираем IP-адреса из префиксов VRF
        vrf_ips = []
        for prefix in prefixes:
            ip_addresses = prefix.get('ip_addresses', [])
            for ip in ip_addresses:
                address = ip.get('address')
                if address:
                    vrf_ips.append(address)

        # Дедупликация IP-адресов
        vrf_ips = list(set(vrf_ips))
        return vrf_ips

    except Exception as error:
        return get_ips_in_vrf_fallback(nautobot_api, vrf_id, vrf_name)


def get_ips_in_vrf_fallback(nautobot_api, vrf_id, vrf_name):
    """
    Fallback метод через REST API для случаев, когда GraphQL не работает.
    """
    try:
        # Получаем ВСЕ assignments и фильтруем вручную (обходной путь для бага API)
        all_assignments = nautobot_api.ipam.vrf_prefix_assignments.all()
        vrf_assignments = [a for a in all_assignments if a.vrf.id == vrf_id]

        # Дедупликация префиксов (убираем дублированные assignments)
        prefix_ids = list(set([a.prefix.id for a in vrf_assignments]))

        # Собираем все IP сначала, дедуплицируем в конце
        vrf_ips = []
        for prefix_id in prefix_ids:
            try:
                ip_addresses = nautobot_api.ipam.ip_addresses.filter(parent=prefix_id)
                vrf_ips.extend([ip.address for ip in ip_addresses])
            except Exception as prefix_error:
                logger.error(f"Error processing prefix {prefix_id}: {prefix_error}")

        # Дедупликация IP-адресов один раз в конце
        vrf_ips = list(set(vrf_ips))
        return vrf_ips

    except Exception as error:
        logger.error(f"REST fallback error for VRF {vrf_name}: {error}")
        return []


def handle_existing_ip_error(nautobot_api, ip_address, vrf_id):
    """
    Обрабатывает ошибку существующего IP-адреса.
    Добавляет VRF к префиксу, если его там нет.
    """
    try:
        # Находим существующий IP-адрес
        existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_address)
        if not existing_ip:
            logger.error(f"Cannot find existing IP {ip_address}")
            return False

        if not existing_ip.parent:
            logger.error(f"IP {ip_address} has no parent prefix")
            return False

        prefix_id = existing_ip.parent.id

        # Проверяем, есть ли уже нужный VRF у префикса
        existing_vrf_assignments = nautobot_api.ipam.vrf_prefix_assignments.filter(prefix=prefix_id)
        existing_vrf_ids = [assignment.vrf.id for assignment in existing_vrf_assignments]

        if vrf_id not in existing_vrf_ids:
            # Добавляем VRF к префиксу
            nautobot_api.ipam.vrf_prefix_assignments.create(
                prefix=prefix_id,
                vrf=vrf_id
            )

        return True

    except Exception as error:
        logger.error(f"Error handling existing IP {ip_address}: {error}")
        return False


def create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name, device_name):
    """Создает IP-адрес в Nautobot с обработкой конфликтов."""
    ip_address = f"{arp_entry['address']}/32"

    # Дополнительная проверка существования IP перед созданием
    try:
        existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_address)
        if existing_ip is not None:
            logger.warning(
                f"IP {ip_address} already exists but wasn't found in VRF {vrf_name} check for device {device_name}")
            # Пытаемся исправить VRF assignment
            handle_existing_ip_error(nautobot_api, ip_address, vrf_id)
            return
    except Exception:
        # IP не существует, можно создавать
        pass

    try:
        nautobot_api.ipam.ip_addresses.create([{
            "address": ip_address,
            "custom_fields": {
                "mac_address": arp_entry['mac']
            },
            "dns_name": dns_name,
            "status": "Active",
            "namespace": "ed1a3ab7-deea-4872-b111-b44513de94a8"
        }])

    except Exception as error:
        if "duplicate key value violates unique constraint" in str(error):
            # Race condition - нормальная ситуация
            pass
        elif "already exists" in str(error).lower():
            if handle_existing_ip_error(nautobot_api, ip_address, vrf_id):
                pass  # VRF conflict resolved
            else:
                logger.error(f"Could not resolve VRF conflict for IP {ip_address}, device {device_name}")
        else:
            logger.warning(f"Failed to create IP {ip_address} for device {device_name}: {error}")


def create_arp_nautobot_on_cisco_ios(nautobot_device, nautobot_api):
    """Обрабатывает ARP записи для устройств Cisco IOS."""
    device_start_time = time.time()
    
    net_connect = netmiko_connect_with_retry(nautobot_device, 'cisco_ios')

    if not net_connect:
        log_device_timing(nautobot_device.name, 'total_device_time', time.time() - device_start_time)
        return

    try:
        # Обрабатываем глобальную ARP таблицу
        process_global_arp_table(net_connect, nautobot_device, nautobot_api, 'cisco_ios')

        # Обрабатываем VRF
        vrf_start = time.time()
        device_vrfs = nautobot_api.ipam.vrfs.filter(device=nautobot_device.id)
        existing_vrf_in_device = {vrf.name: vrf.id for vrf in device_vrfs}
        vrf_get_duration = time.time() - vrf_start
        log_device_timing(nautobot_device.name, 'get_device_vrfs', vrf_get_duration)

        total_dns_lookups = 0
        total_api_checks = 0
        total_api_creates = 0

        for vrf_name, vrf_id in existing_vrf_in_device.items():
            vrf_process_start = time.time()
            try:
                # Получаем IP-адреса в VRF
                vrf_ips_start = time.time()
                nautobot_device_arp = get_ips_in_vrf(nautobot_api, vrf_id, vrf_name)
                vrf_ips_duration = time.time() - vrf_ips_start
                log_device_timing(nautobot_device.name, f'get_vrf_ips_{vrf_name}', vrf_ips_duration)

                # Получаем ARP-таблицу с устройства
                cmd_start = time.time()
                output = send_command_safe(net_connect, f'show ip arp vrf {vrf_name}')
                cmd_duration = time.time() - cmd_start
                log_device_timing(nautobot_device.name, f'show_ip_arp_vrf_{vrf_name}', cmd_duration)
                
                parse_start = time.time()
                device_arp = parse_output(platform='cisco_ios', command='show ip arp', data=output)
                parse_duration = time.time() - parse_start
                log_device_timing(nautobot_device.name, f'parse_arp_vrf_{vrf_name}', parse_duration)

                # Форматируем MAC-адреса
                for arp_entry in device_arp:
                    arp_entry['mac'] = format_mac_address(arp_entry['mac'])

                # Обрабатываем каждую ARP запись
                vrf_dns_count = 0
                vrf_api_creates = 0
                
                for arp_entry in device_arp:
                    skip_list = [
                        '192.168.0.0', '192.168.0.1', '192.168.0.2',
                        '192.168.0.3', '192.168.0.4', '192.168.0.5',
                        '192.168.0.6'
                    ]

                    # Пропускаем служебные IP-адреса
                    if any(sub in arp_entry['address'] for sub in skip_list):
                        continue

                    # Пропускаем неполные MAC-адреса
                    if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                        continue

                    # Получаем DNS имя
                    ip_with_mask = f"{arp_entry['address']}/32"
                    if ip_with_mask not in nautobot_device_arp:
                        vrf_dns_count += 1
                        dns_name = get_dns_name(arp_entry['address'])
                        vrf_api_creates += 1
                        create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name,
                                                      nautobot_device.name)
                
                total_dns_lookups += vrf_dns_count
                total_api_creates += vrf_api_creates
                
                vrf_process_duration = time.time() - vrf_process_start
                log_device_timing(nautobot_device.name, f'process_vrf_{vrf_name}', vrf_process_duration)
                log_device_timing(nautobot_device.name, f'dns_lookups_vrf_{vrf_name}', vrf_dns_count)
                log_device_timing(nautobot_device.name, f'api_creates_vrf_{vrf_name}', vrf_api_creates)
                
            except Exception as vrf_error:
                logger.error(f'Error processing VRF {vrf_name} for device {nautobot_device.name}: {vrf_error}')

        log_device_timing(nautobot_device.name, 'total_dns_lookups', total_dns_lookups)
        log_device_timing(nautobot_device.name, 'total_api_creates', total_api_creates)
        
        net_connect.disconnect()

    except Exception as error:
        logger.error(f'Error processing device {nautobot_device.name}: {error}')
    
    finally:
        total_device_time = time.time() - device_start_time
        log_device_timing(nautobot_device.name, 'total_device_time', total_device_time)


def print_device_timing_stats():
    """Выводит статистику по времени выполнения для каждого устройства."""
    print("\n" + "="*100)
    print("DEVICE PERFORMANCE STATISTICS")
    print("="*100)
    
    # Сортируем устройства по общему времени выполнения (убывание)
    sorted_devices = sorted(
        device_timings.items(),
        key=lambda x: x[1].get('total_device_time', 0),
        reverse=True
    )
    
    # Топ 20 самых медленных устройств
    print(f"\nTOP 20 SLOWEST DEVICES (by total processing time):")
    print("-" * 100)
    print(f"{'#':<3} {'Device Name':<30} {'Total Time':<12} {'Connect':<10} {'DNS Lookups':<12} {'API Creates':<12}")
    print("-" * 100)
    
    for i, (device_name, timings) in enumerate(sorted_devices[:20], 1):
        total_time = timings.get('total_device_time', 0)
        connect_time = timings.get('netmiko_connect', 0)
        dns_lookups = timings.get('total_dns_lookups', 0)
        api_creates = timings.get('total_api_creates', 0)
        
        print(f"{i:<3} {device_name:<30} {total_time:<12.2f} {connect_time:<10.2f} {dns_lookups:<12} {api_creates:<12}")
    
    # Детальная статистика для топ 10
    print(f"\n\nDETAILED BREAKDOWN FOR TOP 10 SLOWEST DEVICES:")
    print("=" * 120)
    
    for i, (device_name, timings) in enumerate(sorted_devices[:10], 1):
        print(f"\n{i}. {device_name} (Total: {timings.get('total_device_time', 0):.2f}s)")
        print("-" * 80)
        
        # Группируем операции по категориям
        connection_ops = {}
        global_ops = {}
        vrf_ops = {}
        other_ops = {}
        
        for operation, duration in timings.items():
            if 'connect' in operation:
                connection_ops[operation] = duration
            elif 'global' in operation:
                global_ops[operation] = duration
            elif 'vrf' in operation:
                vrf_ops[operation] = duration
            elif operation not in ['total_device_time', 'total_dns_lookups', 'total_api_creates']:
                other_ops[operation] = duration
        
        # Выводим по категориям
        if connection_ops:
            print("  Connection Operations:")
            for op, dur in sorted(connection_ops.items(), key=lambda x: x[1], reverse=True):
                if isinstance(dur, (int, float)):
                    print(f"    {op:<35}: {dur:>8.2f}s")
                else:
                    print(f"    {op:<35}: {dur:>8}")
        
        if global_ops:
            print("  Global ARP Operations:")
            for op, dur in sorted(global_ops.items(), key=lambda x: x[1] if isinstance(x[1], (int, float)) else 0, reverse=True):
                if isinstance(dur, (int, float)):
                    print(f"    {op:<35}: {dur:>8.2f}s")
                else:
                    print(f"    {op:<35}: {dur:>8}")
        
        if other_ops:
            print("  Other Operations:")
            for op, dur in sorted(other_ops.items(), key=lambda x: x[1] if isinstance(x[1], (int, float)) else 0, reverse=True):
                if isinstance(dur, (int, float)):
                    print(f"    {op:<35}: {dur:>8.2f}s")
                else:
                    print(f"    {op:<35}: {dur:>8}")
        
        # VRF операции группируем отдельно
        vrf_groups = {}
        for op, dur in vrf_ops.items():
            vrf_name = op.split('_')[-1] if '_' in op else 'unknown'
            if vrf_name not in vrf_groups:
                vrf_groups[vrf_name] = {}
            vrf_groups[vrf_name][op] = dur
        
        if vrf_groups:
            print("  VRF Operations:")
            for vrf_name, vrf_timings in vrf_groups.items():
                total_vrf_time = sum(v for v in vrf_timings.values() if isinstance(v, (int, float)))
                print(f"    VRF '{vrf_name}' (Total: {total_vrf_time:.2f}s):")
                for op, dur in sorted(vrf_timings.items(), key=lambda x: x[1] if isinstance(x[1], (int, float)) else 0, reverse=True):
                    if isinstance(dur, (int, float)):
                        print(f"      {op:<33}: {dur:>8.2f}s")
                    else:
                        print(f"      {op:<33}: {dur:>8}")
    
    # Общая статистика
    print(f"\n\nOVERALL STATISTICS:")
    print("=" * 60)
    
    total_devices = len(device_timings)
    total_script_time = sum(timings.get('total_device_time', 0) for timings in device_timings.values())
    total_dns_lookups = sum(timings.get('total_dns_lookups', 0) for timings in device_timings.values())
    total_api_creates = sum(timings.get('total_api_creates', 0) for timings in device_timings.values())
    
    avg_device_time = total_script_time / total_devices if total_devices > 0 else 0
    
    print(f"Total devices processed: {total_devices}")
    print(f"Total processing time: {total_script_time:.2f}s")
    print(f"Average time per device: {avg_device_time:.2f}s")
    print(f"Total DNS lookups: {total_dns_lookups}")
    print(f"Total API creates: {total_api_creates}")
    
    if total_dns_lookups > 0:
        avg_dns_time = total_script_time / total_dns_lookups
        print(f"Average time per DNS lookup: {avg_dns_time:.3f}s")
    
    # Статистика по операциям
    print(f"\n\nOPERATION STATISTICS:")
    print("-" * 60)
    
    operation_stats = defaultdict(list)
    for device_name, timings in device_timings.items():
        for operation, duration in timings.items():
            if isinstance(duration, (int, float)) and operation != 'total_device_time':
                operation_stats[operation].append(duration)
    
    print(f"{'Operation':<35} {'Count':<8} {'Total':<10} {'Avg':<10} {'Max':<10}")
    print("-" * 60)
    
    for operation, durations in sorted(operation_stats.items()):
        if durations:
            count = len(durations)
            total = sum(durations)
            avg = total / count
            max_dur = max(durations)
            print(f"{operation:<35} {count:<8} {total:<10.2f} {avg:<10.3f} {max_dur:<10.2f}")


def add_arp_entry_to_nautobot():
    """Основная функция для добавления ARP записей в Nautobot."""
    start_time = time.time()
    api = nautobot_connection()

    # Строим мапу тегов
    all_tags = list(api.extras.tags.all())
    tag_map = {tag.id: tag.name for tag in all_tags}

    # Фильтруем нужные устройства
    devices = list(api.dcim.devices.all())
    target_devices = []

    for device in devices:
        tag_names = [tag_map.get(tag.id) for tag in (device.tags or [])]
        if 'raif_scripts' in tag_names:
            target_devices.append(device)

    print(f"Found {len(target_devices)} target devices")

    # Многопоточная обработка устройств
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        futures = []
        for nautobot_device in target_devices:
            if nautobot_device.platform and nautobot_device.platform.name == 'Cisco NXOS':
                future = executor.submit(
                    create_arp_nautobot_on_cisco_nxos,
                    nautobot_device,
                    api,
                )
                futures.append(future)
            elif nautobot_device.platform and nautobot_device.platform.name == 'Cisco IOS':
                future = executor.submit(
                    create_arp_nautobot_on_cisco_ios,
                    nautobot_device,
                    api,
                )
                futures.append(future)
        
        # Ждем завершения всех задач
        concurrent.futures.wait(futures)

    execution_time = time.time() - start_time
    print(f"Script execution completed in {execution_time:.2f} seconds")
    
    # Выводим детальную статистику
    print_device_timing_stats()


if __name__ == "__main__":
    add_arp_entry_to_nautobot()_start_time
        log_device_timing(nautobot_device.name, 'total_device_time', total_device_time)


def create_arp_nautobot_on_cisco_nxos(nautobot_device, nautobot_api):
    """Обрабатывает ARP записи для устройств Cisco NXOS."""
    device_start_time = time.time()
    
    net_connect = netmiko_connect_with_retry(nautobot_device, 'cisco_nxos')

    if not net_connect:
        log_device_timing(nautobot_device.name, 'total_device_time', time.time() - device_start_time)
        return

    try:
        # Обрабатываем глобальную ARP таблицу
        process_global_arp_table(net_connect, nautobot_device, nautobot_api, 'cisco_nxos')

        # Обрабатываем VRF
        vrf_start = time.time()
        device_vrfs = nautobot_api.ipam.vrfs.filter(device=nautobot_device.id)
        existing_vrf_in_device = {vrf.name: vrf.id for vrf in device_vrfs}
        vrf_get_duration = time.time() - vrf_start
        log_device_timing(nautobot_device.name, 'get_device_vrfs', vrf_get_duration)

        total_dns_lookups = 0
        total_api_creates = 0

        for vrf_name, vrf_id in existing_vrf_in_device.items():
            vrf_process_start = time.time()
            try:
                # Получаем IP-адреса в VRF
                vrf_ips_start = time.time()
                nautobot_device_arp = get_ips_in_vrf(nautobot_api, vrf_id, vrf_name)
                vrf_ips_duration = time.time() - vrf_ips_start
                log_device_timing(nautobot_device.name, f'get_vrf_ips_{vrf_name}', vrf_ips_duration)

                # Получаем ARP-таблицу с устройства
                cmd_start = time.time()
                output = send_command_safe(net_connect, f'show ip arp vrf {vrf_name}')
                cmd_duration = time.time() - cmd_start
                log_device_timing(nautobot_device.name, f'show_ip_arp_vrf_{vrf_name}', cmd_duration)
                
                parse_start = time.time()
                device_arp = parse_output(platform='cisco_nxos', command='show ip arp', data=output)
                parse_duration = time.time() - parse_start
                log_device_timing(nautobot_device.name, f'parse_arp_vrf_{vrf_name}', parse_duration)

                # Форматируем MAC-адреса
                for arp_entry in device_arp:
                    arp_entry['mac'] = format_mac_address(arp_entry['mac'])

                # Обрабатываем каждую ARP запись
                vrf_dns_count = 0
                vrf_api_creates = 0
                
                for arp_entry in device_arp:
                    # Пропускаем неполные MAC-адреса
                    if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                        continue

                    # Получаем DNS имя
                    ip_with_mask = f"{arp_entry['address']}/32"
                    if ip_with_mask not in nautobot_device_arp:
                        vrf_dns_count += 1
                        dns_name = get_dns_name(arp_entry['address'])
                        vrf_api_creates += 1
                        create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name,
                                                      nautobot_device.name)
                
                total_dns_lookups += vrf_dns_count
                total_api_creates += vrf_api_creates
                
                vrf_process_duration = time.time() - vrf_process_start
                log_device_timing(nautobot_device.name, f'process_vrf_{vrf_name}', vrf_process_duration)
                log_device_timing(nautobot_device.name, f'dns_lookups_vrf_{vrf_name}', vrf_dns_count)
                log_device_timing(nautobot_device.name, f'api_creates_vrf_{vrf_name}', vrf_api_creates)
                
            except Exception as vrf_error:
                logger.error(f'Error processing VRF {vrf_name} for device {nautobot_device.name}: {vrf_error}')

        log_device_timing(nautobot_device.name, 'total_dns_lookups', total_dns_lookups)
        log_device_timing(nautobot_device.name, 'total_api_creates', total_api_creates)
        
        net_connect.disconnect()

    except Exception as error:
        logger.error(f'Error processing device {nautobot_device.name}: {error}')
    
    finally:
        total_device_time = time.time() - device
