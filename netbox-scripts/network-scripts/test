import os
import requests
import urllib3
from concurrent.futures import ThreadPoolExecutor, as_completed
import pynautobot

# Отключение InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# —————————————————————————————————————————————————————————
#  Конфигурация
# —————————————————————————————————————————————————————————
NAUTOBOT_URL = os.getenv("NAUTOBOT_URL", "https://s-msk-p-netbox02")
NAUTOBOT_TOKEN = os.getenv("NAUTOBOT_TOKEN", "e1fbfbcdc94dc589c4beea1b837bdce5b19a9763")
IPAM_HOST = "ipam.raiffeisen.ru"
IPAM_TOKEN = "p5msyTWUSaSuj-hvOcGb0fjt2nLL-fPt"
IPAM_APP_ID = "gts"

HEADERS = {
    "Authorization": f"Token {NAUTOBOT_TOKEN}",
    "Content-Type": "application/json",
    "Accept": "application/json",
}

api = pynautobot.api(
    NAUTOBOT_URL,
    token=NAUTOBOT_TOKEN,
    verify=False,
)
adapter = requests.adapters.HTTPAdapter(
    pool_connections=1000,
    pool_maxsize=1000
)
api.http_session.mount('http://', adapter)
api.http_session.mount('https://', adapter)
api.http_session.verify = False

from ipam import IPAM

ipam = IPAM(hostname=IPAM_HOST, app_id=IPAM_APP_ID, token=IPAM_TOKEN)
php_prefixes = ipam.ip_address.get().get("data", [])

for ip in php_prefixes:
    ip_nb = api.ipam.ip_addresses.get(address=f"{ip['ip']}/32")
    import re
    if ip_nb is None:
        try:
            if ip['hostname'] is not None:
                dnsname = re.sub(r'[#*()\s\[\]\"]', '', ip['hostname'])
            else:
                dnsname = 'Unknown'
            api.ipam.ip_addresses.create(
                address=f"{ip['ip']}/32",
                status='Active',
                description=ip['description'] if ip['description'] is not None else 'Imported from IPAM',
                dns_name=dnsname,
                namespace="ed1a3ab7-deea-4872-b111-b44513de94a8",
            )
        except Exception as error:
            print(error, ip['ip'])
        #print(ip['ip'], 'create')
from pprint import pprint

# for prefix in php_prefixes:
#     prefix_nb = api.ipam.prefixes.get(prefix=f"{prefix['subnet']}/{prefix['mask']}")
#
#     if prefix_nb is not None:
#         if prefix['custom_Location'] is not None:
#             location_nb = api.dcim.locations.get(name=prefix['custom_Location'])
#             if location_nb is None:
#                 if prefix['custom_Location'] == 'MSK34' or prefix['custom_Location'] == 'MSK70' or prefix[
#                     'custom_Location'] == 'MSKD8' or prefix['custom_Location'] == 'MSKX5':
#                     location_type = api.dcim.location_types.get(name='DC')
#                 else:
#                     location_type = api.dcim.location_types.get(name='NON DC')
#                 api.dcim.locations.create(status='Active', name=prefix['custom_Location'],
#                                           location_type=location_type.id)
#             else:
#                 if len(prefix_nb.locations) == 0:
#                     api.ipam.prefix_location_assignments.create(prefix=prefix_nb.id, location=location_nb.id)
#
#         if prefix['custom_k8s'] != '0':
#             prefix_nb.update(({'custom_fields': {'k8s': True}}))
#
#         if prefix['custom_vRA'] != '0':
#             prefix_nb.update(({'custom_fields': {'vra': True}}))
#
#         if prefix['custom_Comment'] is not None:
#             prefix_nb.update(({'custom_fields': {'comment': prefix['custom_Comment']}}))
