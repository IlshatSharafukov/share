import pynautobot
import requests
from collections import Counter
from decouple import config

# Константы из окружения
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')


def get_nautobot_api():
    """
    Возвращает клиент pynautobot с увеличенным пулом соединений.
    """
    api = pynautobot.api(
        NAUTOBOT_URL,
        token=NAUTOBOT_TOKEN,
        verify=False,
    )
    adapter = requests.adapters.HTTPAdapter(
        pool_connections=1000,
        pool_maxsize=1000
    )
    api.http_session.mount('http://', adapter)
    api.http_session.mount('https://', adapter)
    api.http_session.verify = False
    return api


def find_duplicate_vrfs():
    """
    Находит все VRF с дублированными именами в Nautobot
    """
    print("Подключаемся к Nautobot...")
    api = get_nautobot_api()
    
    print("Получаем все VRF...")
    all_vrfs = api.ipam.vrfs.all()
    
    print(f"Всего найдено VRF: {len(all_vrfs)}")
    
    # Считаем количество VRF по именам
    vrf_names = [vrf.name for vrf in all_vrfs]
    name_counts = Counter(vrf_names)
    
    # Находим дубли
    duplicates = {name: count for name, count in name_counts.items() if count > 1}
    
    if not duplicates:
        print("Дублированные VRF не найдены!")
        return
    
    print(f"\nНайдено {len(duplicates)} дублированных имен VRF:")
    print("=" * 50)
    
    for vrf_name, count in duplicates.items():
        print(f"\nVRF '{vrf_name}' встречается {count} раз:")
        
        # Получаем все VRF с этим именем
        duplicate_vrfs = [vrf for vrf in all_vrfs if vrf.name == vrf_name]
        
        for i, vrf in enumerate(duplicate_vrfs, 1):
            print(f"  {i}. ID: {vrf.id}, RD: {vrf.rd or 'None'}, "
                  f"Description: {vrf.description or 'None'}")
    
    print("\n" + "=" * 50)
    print(f"Итого дублированных VRF: {sum(duplicates.values())}")
    print(f"Уникальных дублированных имен: {len(duplicates)}")


if __name__ == "__main__":
    find_duplicate_vrfs()
