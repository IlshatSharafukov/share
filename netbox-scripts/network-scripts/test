import pynetbox
import urllib3
import re
from decouple import config
import time
from hpnapy import *
import concurrent.futures
import os

set_ipam_device = set()
set_hpna_device = set()
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

HPNA_LOGIN = config('HPNA_LOGIN')
HPNA_PASSWORD = config('HPNA_PASSWORD')
NETBOX_URL = config('NETBOX_URL')
NETBOX_TOKEN = config('NETBOX_TOKEN')


location_map = {
    'MSKX5': r'MSKX5',
    'MSK34': r'MSK34',
    'MSK70': r'MSK70',
    'MSKD8': r'MSKD8',
}

device_roles = {
    'BA-': 'LOAD BALANCER',
    'FX-': 'FABRIC NEXUS',
    'MS-': 'MULTILAYER SWITCH',
    'MX-': 'MULTILAYER SWITCH WITH ADDITIONAL FUNCTIONS',
    'ND-': 'NETWORK DEVICE',
    'QSW': 'SWITCH',
    'RT-': 'ROUTER',
    'SW-': 'SWITCH',
    'TS-': 'TERMINAL SERVER',
    'NX-': 'SWITCH',
    'FW-': 'FIREWALL'
}

device_role_map = {
    'QSW': 'switch',
    'MS-': 'switch',
    'MX-': 'switch',
    'SW-': 'switch',
    'NX-': 'switch',
    'FX-': 'switch'
}


def update_interface(netbox_api, hpna_device_ip, device_hostname):
    try:
        device_ip = netbox_api.ipam.ip_addresses.get(address=hpna_device_ip, vrf_name='default')
        device_interface = netbox_api.dcim.interfaces.get(name='mgmt interface', device=device_hostname)
        device_name_nb = netbox_api.dcim.devices.get(name=device_hostname)
        update_dict = dict(assigned_object_id=device_interface.id, assigned_object_type="dcim.interface")
        device_ip.update(update_dict)
        device_name_nb.primary_ip4 = device_ip
        device_name_nb.save()
    except pynetbox.RequestError as err:
        print(f"Failed to update device mgmt interface {device_hostname}: {err}")


def fetch_device_role_for_vlan_group(device_hostname):
    device_role = 'UNKNOWN'
    for prefix, role in device_role_map.items():
        if device_hostname.lower().startswith(prefix.lower()):
            device_role = role
            break
    return device_role


def generate_device_model_slug(device_model):
    device_model_slug = device_model.lower()
    device_model_slug = re.sub(r'\s+', '_', device_model_slug)
    device_model_slug = re.sub(r'[^a-z0-9_]', '_', device_model_slug)
    return device_model_slug


def generate_slug(input_string):
    slug = input_string.lower()
    slug = re.sub(r'\s+', '_', slug)
    slug = re.sub(r'[^a-z0-9_]', '_', slug)
    return slug


def fetch_device_role(device_hostname):
    device_role = 'UNKNOWN'
    for prefix, role in device_roles.items():
        if device_hostname.startswith(prefix):
            device_role = role
            break
    return device_role


def netbox_connection():
    netbox_api = pynetbox.api(
        config('NETBOX_URL'),
        token=config('NETBOX_TOKEN'),
        threading=True
    )
    netbox_api.http_session.verify = False
    return netbox_api


def get_location(device_hostname):
    for location, pattern in location_map.items():
        if re.search(pattern, device_hostname):
            return location
    return 'BRANCH'


def hpna_connection():
    hpna_api = NAInterface("https://hpna.raiffeisen.ru", ssl_verify=False)
    hpna_api.login(config('HPNA_WEB_LOGIN'), config('HPNA_WEB_PASSWORD'))
    return hpna_api


def add_new_device_to_netbox(hpna_api_device_entry, netbox_api, hpna_api):
    device_hostname = (re.sub(r'\.(net\.pri|NET\.PRI)$', '', str(hpna_api_device_entry.hostName))).upper()
    set_hpna_device.add(str(device_hostname))
    hpna_device_ip = hpna_api_device_entry.primaryIPAddress
    hpna_device_vendor = hpna_api_device_entry.vendor
    hpna_device_model = hpna_api_device_entry.model

    try:
        hpna_device_family = hpna_api.show_device_family(ip=str(hpna_device_ip))
    except Exception:
        hpna_device_family = 'UNKNOWN'

    if hpna_device_vendor is None:
        hpna_device_vendor = 'UNKNOWN'

    if hpna_device_model is None:
        hpna_device_model = 'UNKNOWN'

    if hpna_device_ip is None or re.search("^\w+\.\w+\.\w+\.\w+$", device_hostname):
        return
    if hpna_device_vendor and hpna_device_model == (' ' or None or 'UNKNOWN' or ''):
        return

    device_hpna_location = get_location(device_hostname)
    device_hpna_role = fetch_device_role(device_hostname)

    device_role_slug = generate_slug(device_hpna_role)
    device_vendor_slug = generate_slug(hpna_device_vendor)
    device_model_slug = generate_device_model_slug(hpna_device_model)
    device_platform_slug = generate_slug(hpna_device_family)

    if netbox_api.dcim.device_roles.get(name=device_hpna_role, slug=device_role_slug) is None:
        try:
            netbox_api.dcim.device_roles.create(name=device_hpna_role, slug=device_role_slug)
        except pynetbox.RequestError as err:
            print(f"Failed to create device role for device {device_hostname}: {err}")
    if netbox_api.extras.tags.get(name=device_hpna_role, slug=device_role_slug) is None:
        try:
            netbox_api.extras.tags.create(name=device_hpna_role, slug=device_role_slug)
        except pynetbox.RequestError as err:
            print(f"Failed to create tag for device {device_hostname}: {err}")
    if netbox_api.dcim.manufacturers.get(name=hpna_device_vendor, slug=device_vendor_slug) is None:
        try:
            netbox_api.dcim.manufacturers.create(name=hpna_device_vendor, slug=device_vendor_slug)
        except pynetbox.RequestError as err:
            print(f"Failed to create manufacturers for device {device_hostname}: {err}")
    if netbox_api.dcim.device_types.get(model=hpna_device_model) is None:
        try:
            device_vendor_nb = netbox_api.dcim.manufacturers.get(name=hpna_device_vendor, slug=device_vendor_slug)
            netbox_api.dcim.device_types.create(model=hpna_device_model, manufacturer=device_vendor_nb.id,
                                                slug=device_model_slug)
        except pynetbox.RequestError as err:
            print(f"Failed to create device vendor for device {device_hostname}: {err}")
    if netbox_api.dcim.platforms.get(name=hpna_device_family) is None:
        try:
            netbox_api.dcim.platforms.create(name=hpna_device_family, slug=device_platform_slug)
        except pynetbox.RequestError as err:
            print(f"Failed to create device platform for device {device_hostname}: {err}")

    try:
        device_role_id = netbox_api.dcim.device_roles.get(name=device_hpna_role).id
    except pynetbox.RequestError as err:
        device_role_id = 10
        print(f'Failed to get device role: {device_hostname}')

    try:
        device_type_id = netbox_api.dcim.device_types.get(model=hpna_device_model).id
    except pynetbox.RequestError as err:
        device_type_id = 58
        print(f'Failed to get device type: {device_hostname}')

    try:
        site_id = netbox_api.dcim.sites.get(name=device_hpna_location).id
    except pynetbox.RequestError as err:
        site_id = 6
        print(f'Failed to get site: {device_hostname}')

    try:
        platform_id = netbox_api.dcim.platforms.get(name=hpna_device_family).id
    except pynetbox.RequestError as err:
        platform_id = 2
        print(f'Failed to get platform: {device_hostname}')

    if netbox_api.dcim.devices.get(name=device_hostname) is None:
        try:
            netbox_api.dcim.devices.create(name=device_hostname,
                                           role=device_role_id,
                                           device_type=device_type_id,
                                           site=site_id,
                                           platform=platform_id,
                                           status='active',
                                           tags=[{'name': device_hpna_role}, {'name': 'raif_scripts'}])
        except pynetbox.RequestError as err:
            print(f"Failed to create device {device_hostname}: {err}")

        try:
            netbox_api.dcim.interfaces.create(device=(netbox_api.dcim.devices.get(name=device_hostname)).id,
                                              name='mgmt interface',
                                              type='virtual',
                                              mtu='1500',
                                              description='this interface need for mgmt and control device',
                                              mgmt_only=True)
        except pynetbox.RequestError as err:
            print(f"Failed to create device mgmt interface {device_hostname}: {err}")

        if netbox_api.ipam.ip_addresses.get(address=hpna_device_ip, vrf_name='default') is None:
            try:
                netbox_api.ipam.ip_addresses.create(address=hpna_device_ip,
                                                    vrf=(netbox_api.ipam.vrfs.get(name='default')).id,
                                                    description='int loo0; this ip need for mgmt and control device')
            except pynetbox.RequestError as err:
                print(f"Failed to create device mgmt ip address {device_hostname}: {err}")

        update_interface(netbox_api, hpna_device_ip, device_hostname)

        device_role_for_device_group = fetch_device_role_for_vlan_group(device_hostname)

        vlan_group_slug = generate_slug(device_hostname)
        if netbox_api.ipam.vlan_groups.get(name=device_hostname) is None:
            try:
                netbox_api.ipam.vlan_groups.create(name=device_hostname,
                                                   slug=vlan_group_slug,
                                                   scope_type='dcim.site',
                                                   scope_id=netbox_api.dcim.sites.get(name=device_hpna_location).id)
            except pynetbox.RequestError as err:
                print(f'Error when create vlan group: {device_hostname} - {err}')

    else:
        if netbox_api.dcim.interfaces.get(name='mgmt interface', device=device_hostname) is None:
            try:
                netbox_api.dcim.interfaces.create(device=(netbox_api.dcim.devices.get(name=device_hostname)).id,
                                                  name='mgmt interface',
                                                  type='virtual',
                                                  mtu='1500',
                                                  description='this interface need for mgmt and control device',
                                                  mgmt_only=True)
            except pynetbox.RequestError as err:
                print(f"Failed to create device mgmt interface {device_hostname}: {err}")

        device_interface = netbox_api.dcim.interfaces.get(name='mgmt interface', device=device_hostname)

        if device_interface.count_ipaddresses != 1:
            if netbox_api.ipam.ip_addresses.get(address=hpna_device_ip, vrf_name='default') is None:
                try:
                    netbox_api.ipam.ip_addresses.create(address=hpna_device_ip,
                                                        vrf=(netbox_api.ipam.vrfs.get(name='default')).id,
                                                        description='int loo0; this ip need for mgmt and control device')
                except pynetbox.RequestError as err:
                    print(f"Failed to create device mgmt ip address {device_hostname}: {err}")

            update_interface(netbox_api, hpna_device_ip, device_hostname)

        vlan_group_slug = generate_slug(device_hostname)
        if netbox_api.ipam.vlan_groups.get(name=device_hostname) is None:
            try:
                netbox_api.ipam.vlan_groups.create(name=device_hostname,
                                                   slug=vlan_group_slug,
                                                   scope_type='dcim.site',
                                                   scope_id=netbox_api.dcim.sites.get(name=device_hpna_location).id)
            except pynetbox.RequestError as err:
                print(f'Error when create vlan group: {device_hostname} - {err}')


def processing_hpna_device_list():
    start_time = time.time()
    netbox_api = netbox_connection()
    hpna_api = hpna_connection()
    hpna_device_list = hpna_api.list_device()
    prefix_destruction_count = 0

    # for device in hpna_device_list:
    #     add_new_device_to_netbox(device, netbox_api, hpna_api)

    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        for device in hpna_device_list:
            executor.submit(add_new_device_to_netbox, device, netbox_api, hpna_api)

    devices_in_netbox = netbox_api.dcim.devices.all()

    for device_netbox in devices_in_netbox:
        netbox_device_tags = str(device_netbox.tags)
        if 'raif_scripts' in netbox_device_tags:
            set_ipam_device.add(str(device_netbox.name))

    for device_hpna in hpna_device_list:
        set_hpna_device.add((re.sub(r'\.(net\.pri|NET\.PRI|RBRU\.PRI|rbru\.pri)$', '', str(device_hpna.hostName))).upper())

    set_ipam_device.difference_update(set_hpna_device)

    for device_for_remove in set_ipam_device:
        devices_in_netbox_for_delete = netbox_api.dcim.devices.get(name=device_for_remove)
        print(devices_in_netbox_for_delete)
        prefix_destruction_count += 1

        try:
            ip_for_delete = devices_in_netbox_for_delete.primary_ip
        except:
            ip_for_delete = None

        if ip_for_delete is not None:
            ip_for_delete.delete()

        delete_ip_address_filter = netbox_api.ipam.ip_addresses.filter(cf_Device=devices_in_netbox_for_delete.id)

        for delete_ip_entry in delete_ip_address_filter:
            delete_ip_entry.delete()

        delete_prefix_filter = netbox_api.ipam.prefixes.filter(description=devices_in_netbox_for_delete.name)

        for delete_prefix_entry in delete_prefix_filter:
            delete_prefix_entry.delete()
        try:
            netbox_device_vlan_group = netbox_api.ipam.vlan_groups.get(name=devices_in_netbox_for_delete)
            netbox_device_vlans_in_vlan_group = netbox_api.ipam.vlans.filter(group_id=netbox_device_vlan_group.id)
            for delete in netbox_device_vlans_in_vlan_group:
                delete.delete()
        except:
            print('Error while delete vlan groups')

        delete_vlan_groups_filter = netbox_api.ipam.vlan_groups.filter(name=devices_in_netbox_for_delete.name)

        for delete_vlan_group_entry in delete_vlan_groups_filter:
            delete_vlan_group_entry.delete()

        delete_vrfs_filter = netbox_api.ipam.vrfs.filter(cf_device=devices_in_netbox_for_delete.id)

        for delete_vrf_entry in delete_vrfs_filter:
            delete_vrf_entry.delete()

        devices_in_netbox_for_delete.delete()

    print("--- %s seconds ---" % (time.time() - start_time))


if __name__ == "__main__":
    processing_hpna_device_list()
