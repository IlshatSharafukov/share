import time
import logging
import concurrent.futures
import re
import socket
from datetime import datetime

import urllib3
import requests
from decouple import config
from ntc_templates.parse import parse_output
from netmiko import ConnectHandler
import pynautobot

# Отключаем предупреждения InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Константы из окружения
HPNA_LOGIN = config('HPNA_LOGIN')
HPNA_PASSWORD = config('HPNA_PASSWORD')
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')

# Логгер
logging.basicConfig(
    level=logging.WARNING,  # Показываем только WARNING и ERROR
    format='%(asctime)s %(levelname)s %(message)s'
)
logger = logging.getLogger(__name__)


def netmiko_connect_with_retry(nautobot_device, device_type, max_retries=3):
    """Создает подключение к сетевому устройству через Netmiko с retry логикой."""

    for attempt in range(max_retries):
        try:
            netmiko_device = {
                'device_type': device_type,
                'host': str(nautobot_device.primary_ip4)[:-3:],
                'username': config('HPNA_LOGIN'),
                'password': config('HPNA_PASSWORD'),
                'timeout': 300,
                'port': 22,
                "global_delay_factor": 3,
                'conn_timeout': 300,
                'blocking_timeout': 20,
                'keepalive': 30
            }

            net_connect = ConnectHandler(**netmiko_device)
            return net_connect

        except Exception as error:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                time.sleep(wait_time)
                continue
            else:
                logger.error(f'Connection error {nautobot_device}')
                return None

    return None


def send_command_safe(connection, command, timeout=300):
    """Безопасная отправка команды с обработкой pattern detection проблем."""
    try:
        return connection.send_command(command, read_timeout=timeout)
    except Exception as error:
        if "pattern not detected" in str(error).lower():
            try:
                return connection.send_command(command, read_timeout=timeout * 2)
            except Exception:
                raise error
        else:
            raise error


def nautobot_connection():
    """Возвращает клиент pynautobot с увеличенным пулом соединений."""
    api = pynautobot.api(
        NAUTOBOT_URL,
        token=NAUTOBOT_TOKEN,
        verify=False,
    )
    adapter = requests.adapters.HTTPAdapter(
        pool_connections=1000,
        pool_maxsize=1000
    )
    api.http_session.mount('http://', adapter)
    api.http_session.mount('https://', adapter)
    api.http_session.verify = False
    return api


def format_mac_address(mac_address):
    """Преобразует MAC-адрес в формат aa-bb-cc-dd-ee-ff."""
    mac_parts = mac_address.split('.')
    mac_joined = ''.join(mac_parts)
    blocks = [mac_joined[x:x + 2] for x in range(0, len(mac_joined), 2)]
    return '-'.join(blocks)


def get_dns_name(ip_address):
    """Получает DNS имя для IP-адреса."""
    try:
        dns_name, alias, address_list = socket.gethostbyaddr(ip_address)
        return re.sub(r'[#*\s\[\]\"]', '', dns_name)
    except Exception:
        return ''


def parse_ilo_arp_output(output):
    """Парсит ARP вывод для iLO и других нестандартных устройств."""
    import re

    arp_entries = []
    lines = output.strip().split('\n')

    for i, line in enumerate(lines):
        if any(skip_word in line.lower() for skip_word in [
            'protocol', 'address', 'age', 'hardware', 'type', 'interface',
            'total number', 'static:', 'dynamic:', 'trust:', 'load for', 'time source'
        ]):
            continue

        match = re.match(r'^(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+)\s+([0-9a-fA-F.]+)\s+(\S+)(?:\s+(.*))?', line.strip())

        if match:
            protocol, address, age, mac, type_field, interface = match.groups()

            arp_entry = {
                'protocol': protocol,
                'address': address,
                'age': age,
                'mac': mac,
                'type': type_field,
                'interface': interface.strip() if interface else ''
            }
            arp_entries.append(arp_entry)

    return arp_entries


def is_empty_arp_table(output):
    """Проверяет, является ли ARP таблица пустой."""
    output_lower = output.lower()

    empty_indicators = [
        'total number of entries: 0',
        'no entries found',
        'arp table is empty',
        'total entries: 0',
        '0 entries',
        'no arp entries'
    ]

    return any(indicator in output_lower for indicator in empty_indicators)


def get_current_timestamp():
    """Возвращает текущую дату и время в формате 2025-07-01 15:30:45."""
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def get_discovered_tag(nautobot_api):
    """Получает тег discovered_from_device."""
    try:
        tag = nautobot_api.extras.tags.get(name='discovered_from_device')
        return tag
    except Exception as error:
        logger.error(f'Tag discovered_from_device not found: {error}')
        return None


def update_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, device_name, discovered_tag):
    """Обновляет существующий IP-адрес в Nautobot."""
    ip_address = f"{arp_entry['address']}/32"
    current_time = get_current_timestamp()

    try:
        # Находим существующий IP-адрес
        existing_ip = nautobot_api.ipam.ip_addresses.get(address=ip_address)
        
        if existing_ip:
            # Подготавливаем данные для обновления
            update_data = {
                'custom_fields': {
                    'mac_address': arp_entry['mac'],
                    'last_update': current_time
                },
                'dns_name': dns_name
            }
            
            # Добавляем тег discovered_from_device если он есть
            if discovered_tag:
                current_tags = [tag.id for tag in existing_ip.tags or []]
                if discovered_tag.id not in current_tags:
                    current_tags.append(discovered_tag.id)
                    update_data['tags'] = current_tags

            # Обновляем IP-адрес
            existing_ip.update(update_data)
            logger.info(f'Updated IP {ip_address} for device {device_name}')
            return True
        else:
            # IP не найден, возвращаем False чтобы можно было создать новый
            return False

    except Exception as error:
        logger.error(f'Failed to update IP {ip_address} for device {device_name}: {error}')
        return False


def create_ip_address_in_nautobot_global(nautobot_api, arp_entry, dns_name, device_name, discovered_tag):
    """Создает IP-адрес в глобальной таблице Nautobot."""
    ip_address = f"{arp_entry['address']}/32"
    current_time = get_current_timestamp()

    try:
        create_data = {
            "address": ip_address,
            "custom_fields": {
                "mac_address": arp_entry['mac'],
                "last_update": current_time
            },
            "dns_name": dns_name,
            "description": "VRF GLOBAL",
            "status": "Active",
            "namespace": "ed1a3ab7-deea-4872-b111-b44513de94a8"
        }

        # Добавляем тег discovered_from_device если он есть
        if discovered_tag:
            create_data['tags'] = [discovered_tag.id]

        nautobot_api.ipam.ip_addresses.create([create_data])
        logger.info(f'Created IP {ip_address} for device {device_name}')

    except Exception as error:
        if "duplicate key value violates unique constraint" in str(error):
            # Race condition - другой поток уже создал IP, пытаемся обновить
            update_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, device_name, discovered_tag)
        elif "No suitable parent Prefix exists" in str(error):
            logger.warning(f"No parent prefix for IP {ip_address}, device {device_name}")
        else:
            logger.warning(f"Failed to create IP {ip_address} for device {device_name}: {error}")


def create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name, device_name, discovered_tag):
    """Создает IP-адрес в Nautobot с обработкой конфликтов."""
    ip_address = f"{arp_entry['address']}/32"
    current_time = get_current_timestamp()

    # Сначала пытаемся обновить существующий IP
    if update_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, device_name, discovered_tag):
        return

    # Если IP не найден, создаем новый
    try:
        create_data = {
            "address": ip_address,
            "custom_fields": {
                "mac_address": arp_entry['mac'],
                "last_update": current_time
            },
            "dns_name": dns_name,
            "status": "Active",
            "namespace": "ed1a3ab7-deea-4872-b111-b44513de94a8"
        }

        # Добавляем тег discovered_from_device если он есть
        if discovered_tag:
            create_data['tags'] = [discovered_tag.id]

        nautobot_api.ipam.ip_addresses.create([create_data])
        logger.info(f'Created IP {ip_address} for device {device_name}')

    except Exception as error:
        if "duplicate key value violates unique constraint" in str(error):
            # Race condition - пытаемся обновить
            update_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, device_name, discovered_tag)
        elif "already exists" in str(error).lower():
            # Конфликт существующего IP - пытаемся обновить
            update_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, device_name, discovered_tag)
        else:
            logger.warning(f"Failed to create IP {ip_address} for device {device_name}: {error}")


def process_global_arp_table(net_connect, nautobot_device, nautobot_api, platform, discovered_tag):
    """Обрабатывает глобальную ARP таблицу устройства."""
    try:
        # Получаем глобальную ARP-таблицу с устройства
        output = send_command_safe(net_connect, 'show ip arp')

        if is_empty_arp_table(output) or len(output) == 0:
            return

        # Пытаемся распарсить вывод стандартным шаблоном
        device_arp = None
        standard_parse_error = None
        custom_parse_error = None

        try:
            device_arp = parse_output(platform=platform, command='show ip arp', data=output)
            if not device_arp:
                raise Exception("Standard parser returned empty result")
        except Exception as error:
            standard_parse_error = str(error)
            try:
                device_arp = parse_ilo_arp_output(output)
                if not device_arp:
                    custom_parse_error = "Custom parser returned empty result"
            except Exception as error:
                custom_parse_error = str(error)

        if not device_arp:
            logger.error(f"Failed to parse ARP output for device {nautobot_device.name}:")
            logger.error(f"  Standard parser error: {standard_parse_error}")
            logger.error(f"  Custom parser error: {custom_parse_error}")
            logger.error(f"  First 500 chars of output: {output[:500]}")
            return

        # Форматируем MAC-адреса
        for arp_entry in device_arp:
            arp_entry['mac'] = format_mac_address(arp_entry['mac'])

        # Обрабатываем каждую ARP запись
        for arp_entry in device_arp:
            # Список служебных IP-адресов для пропуска
            skip_list = [
                '192.168.0.0', '192.168.0.1', '192.168.0.2',
                '192.168.0.3', '192.168.0.4', '192.168.0.5',
                '192.168.0.6'
            ]

            # Пропускаем служебные IP-адреса
            if any(sub in arp_entry['address'] for sub in skip_list):
                continue

            # Пропускаем неполные MAC-адреса
            if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                continue

            # Получаем DNS имя
            dns_name = get_dns_name(arp_entry['address'])

            # Обновляем или создаем IP-адрес
            create_ip_address_in_nautobot_global(nautobot_api, arp_entry, dns_name, nautobot_device.name, discovered_tag)

    except Exception as error:
        logger.error(f'Error processing global ARP table for device {nautobot_device.name}: {error}')


def get_ips_in_vrf(nautobot_api, vrf_id, vrf_name):
    """Получает IP-адреса в VRF через GraphQL."""
    try:
        query = f"""
        query GetVRFPrefixes {{
            vrf(id: "{vrf_id}") {{
                id
                name
                prefixes {{
                    id
                    prefix
                    ip_addresses {{
                        address
                    }}
                }}
            }}
        }}
        """

        result = nautobot_api.graphql.query(query=query)

        if not hasattr(result, 'json') or not result.json:
            raise Exception("No JSON in GraphQL result")

        data = result.json.get('data', {})
        vrf_data = data.get('vrf', {})
        prefixes = vrf_data.get('prefixes', [])

        if not prefixes:
            raise Exception("No prefixes found")

        # Собираем IP-адреса из префиксов VRF
        vrf_ips = []
        for prefix in prefixes:
            ip_addresses = prefix.get('ip_addresses', [])
            for ip in ip_addresses:
                address = ip.get('address')
                if address:
                    vrf_ips.append(address)

        # Дедупликация IP-адресов
        vrf_ips = list(set(vrf_ips))
        return vrf_ips

    except Exception as error:
        return get_ips_in_vrf_fallback(nautobot_api, vrf_id, vrf_name)


def get_ips_in_vrf_fallback(nautobot_api, vrf_id, vrf_name):
    """Fallback метод через REST API для случаев, когда GraphQL не работает."""
    try:
        all_assignments = nautobot_api.ipam.vrf_prefix_assignments.all()
        vrf_assignments = [a for a in all_assignments if a.vrf.id == vrf_id]

        prefix_ids = list(set([a.prefix.id for a in vrf_assignments]))

        vrf_ips = []
        for prefix_id in prefix_ids:
            try:
                ip_addresses = nautobot_api.ipam.ip_addresses.filter(parent=prefix_id)
                vrf_ips.extend([ip.address for ip in ip_addresses])
            except Exception as prefix_error:
                logger.error(f"Error processing prefix {prefix_id}: {prefix_error}")

        vrf_ips = list(set(vrf_ips))
        return vrf_ips

    except Exception as error:
        logger.error(f"REST fallback error for VRF {vrf_name}: {error}")
        return []


def create_arp_nautobot_on_cisco_ios(nautobot_device, nautobot_api, discovered_tag):
    """Обрабатывает ARP записи для устройств Cisco IOS."""
    net_connect = netmiko_connect_with_retry(nautobot_device, 'cisco_ios')

    if not net_connect:
        return

    try:
        # Обрабатываем глобальную ARP таблицу
        process_global_arp_table(net_connect, nautobot_device, nautobot_api, 'cisco_ios', discovered_tag)

        # Обрабатываем VRF
        device_vrfs = nautobot_api.ipam.vrfs.filter(device=nautobot_device.id)
        existing_vrf_in_device = {vrf.name: vrf.id for vrf in device_vrfs}

        for vrf_name, vrf_id in existing_vrf_in_device.items():
            try:
                # Получаем IP-адреса в VRF
                nautobot_device_arp = get_ips_in_vrf(nautobot_api, vrf_id, vrf_name)

                # Получаем ARP-таблицу с устройства
                output = send_command_safe(net_connect, f'show ip arp vrf {vrf_name}')
                device_arp = parse_output(platform='cisco_ios', command='show ip arp', data=output)

                # Форматируем MAC-адреса
                for arp_entry in device_arp:
                    arp_entry['mac'] = format_mac_address(arp_entry['mac'])

                # Обрабатываем каждую ARP запись
                for arp_entry in device_arp:
                    skip_list = [
                        '192.168.0.0', '192.168.0.1', '192.168.0.2',
                        '192.168.0.3', '192.168.0.4', '192.168.0.5',
                        '192.168.0.6'
                    ]

                    # Пропускаем служебные IP-адреса
                    if any(sub in arp_entry['address'] for sub in skip_list):
                        continue

                    # Пропускаем неполные MAC-адреса
                    if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                        continue

                    # Получаем DNS имя
                    dns_name = get_dns_name(arp_entry['address'])

                    # Обновляем или создаем IP-адрес
                    create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name,
                                                  nautobot_device.name, discovered_tag)

            except Exception as vrf_error:
                logger.error(f'Error processing VRF {vrf_name} for device {nautobot_device.name}: {vrf_error}')

        net_connect.disconnect()

    except Exception as error:
        logger.error(f'Error processing device {nautobot_device.name}: {error}')


def create_arp_nautobot_on_cisco_nxos(nautobot_device, nautobot_api, discovered_tag):
    """Обрабатывает ARP записи для устройств Cisco NXOS."""
    net_connect = netmiko_connect_with_retry(nautobot_device, 'cisco_nxos')

    if not net_connect:
        return

    try:
        # Обрабатываем глобальную ARP таблицу
        process_global_arp_table(net_connect, nautobot_device, nautobot_api, 'cisco_nxos', discovered_tag)

        # Обрабатываем VRF
        device_vrfs = nautobot_api.ipam.vrfs.filter(device=nautobot_device.id)
        existing_vrf_in_device = {vrf.name: vrf.id for vrf in device_vrfs}

        for vrf_name, vrf_id in existing_vrf_in_device.items():
            try:
                # Получаем IP-адреса в VRF
                nautobot_device_arp = get_ips_in_vrf(nautobot_api, vrf_id, vrf_name)

                # Получаем ARP-таблицу с устройства
                output = send_command_safe(net_connect, f'show ip arp vrf {vrf_name}')
                device_arp = parse_output(platform='cisco_nxos', command='show ip arp', data=output)

                # Форматируем MAC-адреса
                for arp_entry in device_arp:
                    arp_entry['mac'] = format_mac_address(arp_entry['mac'])

                # Обрабатываем каждую ARP запись
                for arp_entry in device_arp:
                    # Пропускаем неполные MAC-адреса
                    if str(arp_entry['mac']).upper() == 'IN-CO-MP-LE-TE':
                        continue

                    # Получаем DNS имя
                    dns_name = get_dns_name(arp_entry['address'])

                    # Обновляем или создаем IP-адрес
                    create_ip_address_in_nautobot(nautobot_api, arp_entry, dns_name, vrf_id, vrf_name,
                                                  nautobot_device.name, discovered_tag)

            except Exception as vrf_error:
                logger.error(f'Error processing VRF {vrf_name} for device {nautobot_device.name}: {vrf_error}')

        net_connect.disconnect()

    except Exception as error:
        logger.error(f'Error processing device {nautobot_device.name}: {error}')


def update_arp_entries_in_nautobot():
    """Основная функция для обновления ARP записей в Nautobot."""
    start_time = time.time()
    api = nautobot_connection()

    # Получаем тег discovered_from_device
    discovered_tag = get_discovered_tag(api)
    if not discovered_tag:
        logger.error("Cannot proceed without discovered_from_device tag")
        return

    # Строим мапу тегов
    all_tags = list(api.extras.tags.all())
    tag_map = {tag.id: tag.name for tag in all_tags}

    # Фильтруем нужные устройства
    devices = list(api.dcim.devices.all())
    target_devices = []

    for device in devices:
        tag_names = [tag_map.get(tag.id) for tag in (device.tags or [])]
        if 'raif_scripts' in tag_names:
            target_devices.append(device)

    print(f"Found {len(target_devices)} target devices")

    # Многопоточная обработка устройств
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        for nautobot_device in target_devices:
            if nautobot_device.platform and nautobot_device.platform.name == 'Cisco NXOS':
                executor.submit(
                    create_arp_nautobot_on_cisco_nxos,
                    nautobot_device,
                    api,
                    discovered_tag
                )
            elif nautobot_device.platform and nautobot_device.platform.name == 'Cisco IOS':
                executor.submit(
                    create_arp_nautobot_on_cisco_ios,
                    nautobot_device,
                    api,
                    discovered_tag
                )

    execution_time = time.time() - start_time
    print(f"Script execution completed in {execution_time:.2f} seconds")


if __name__ == "__main__":
    update_arp_entries_in_nautobot()
