import concurrent.futures
import time
import pynetbox
import requests
from netmiko import ConnectHandler
import urllib3
from decouple import config
from netmiko.exceptions import NetMikoTimeoutException, NetMikoAuthenticationException
from ntc_templates.parse import parse_output
import logging
import traceback

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logging.basicConfig(
    level=logging.DEBUG,  # Временно включаем DEBUG
    format="%(asctime)s [%(levelname)s] - %(message)s",
    handlers=[
        logging.FileHandler("vrf_script.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger()

def create_route_targets(rt_import_values, rt_export_values, netbox_api, netbox_device):
    combined_values_set = set(rt_import_values) | set(rt_export_values)
    for route_target_device in combined_values_set:
        try:
            netbox_rt = netbox_api.ipam.route_targets.get(name=str(route_target_device))
            if not netbox_rt:
                netbox_api.ipam.route_targets.create(name=route_target_device)
        except Exception as e:
            logger.error(f'Route target error {route_target_device} for {netbox_device.name}: {e}')

def update_route_targets(rt_import_values, rt_export_values, netbox_api, netbox_vrf_for_update, evpn_var):
    try:
        update_list_import = []
        for rt in rt_import_values:
            rt_obj = netbox_api.ipam.route_targets.get(name=str(rt))
            if rt_obj:
                update_list_import.append(rt_obj.id)

        update_list_export = []
        for rt in rt_export_values:
            rt_obj = netbox_api.ipam.route_targets.get(name=str(rt))
            if rt_obj:
                update_list_export.append(rt_obj.id)

        # Получаем текущие route targets для сравнения
        current_import = [rt.id for rt in netbox_vrf_for_update.import_targets] if netbox_vrf_for_update.import_targets else []
        current_export = [rt.id for rt in netbox_vrf_for_update.export_targets] if netbox_vrf_for_update.export_targets else []

        # Обновляем только если есть изменения
        if set(current_import) != set(update_list_import) or set(current_export) != set(update_list_export):
            netbox_vrf_for_update.update({'import_targets': update_list_import})
            netbox_vrf_for_update.update({'export_targets': update_list_export})
            logger.info(f"Route targets updated for VRF {netbox_vrf_for_update.name}")
            
        netbox_vrf_for_update.update({'custom_fields': {'EVPN': evpn_var}})
        
    except Exception as e:
        logger.error(f"Route targets update error for VRF {netbox_vrf_for_update.name}: {e}")

def netbox_connection():
    netbox_api = pynetbox.api(config('NETBOX_URL'), token=config('NETBOX_TOKEN'), threading=True)
    adapter = requests.adapters.HTTPAdapter(pool_connections=500, pool_maxsize=500)
    netbox_api.http_session.mount('http://', adapter)
    netbox_api.http_session.mount('https://', adapter)
    netbox_api.http_session.verify = False
    return netbox_api

def netmiko_connect(netbox_device, device_type):
    netmiko_device = {
        'device_type': device_type,
        'host': str(netbox_device.primary_ip)[:-3:],
        'username': config('HPNA_LOGIN'),
        'password': config('HPNA_PASSWORD'),
        'timeout': 200, 'port': 22, "global_delay_factor": 2, 'conn_timeout': 200
    }

    for attempt in range(2):
        try:
            net_connect = ConnectHandler(**netmiko_device)
            return net_connect
        except Exception as e:
            if attempt == 1:
                logger.error(f"Connection failed to {netbox_device.name}: {e}")
                return None

def synchronize_vrfs(device_vrfs, netbox_device, netbox_api):
    """Синхронизация VRF между устройством и NetBox"""
    
    # Получаем VRF из NetBox для данного устройства
    netbox_vrfs = list(netbox_api.ipam.vrfs.filter(cf_device=netbox_device.id))
    netbox_vrf_names = {vrf.name for vrf in netbox_vrfs}
    device_vrf_names = {vrf.get('name') for vrf in device_vrfs if vrf.get('name') and vrf.get('name') != 'default'}
    
    # ОТЛАДОЧНАЯ ИНФОРМАЦИЯ
    logger.debug(f"Device {netbox_device.name}:")
    logger.debug(f"  NetBox VRFs ({len(netbox_vrf_names)}): {sorted(netbox_vrf_names)}")
    logger.debug(f"  Device VRFs ({len(device_vrf_names)}): {sorted(device_vrf_names)}")
    logger.debug(f"  Raw device_vrfs count: {len(device_vrfs)}")
    
    # Определяем что нужно удалить
    vrfs_to_delete = netbox_vrf_names - device_vrf_names
    
    # Логируем план удаления
    if vrfs_to_delete:
        logger.info(f"VRFs to delete from {netbox_device.name}: {list(vrfs_to_delete)}")
        for vrf_name in vrfs_to_delete:
            # ВРЕМЕННО ЗАКОММЕНТИРОВАНО - пока только логируем
            logger.warning(f"WOULD DELETE VRF: {vrf_name} from {netbox_device.name}")
            
            # Раскомментировать когда будете готовы к реальному удалению:
            # try:
            #     vrf_to_delete = netbox_api.ipam.vrfs.get(name=vrf_name, cf_device=netbox_device.id)
            #     if vrf_to_delete:
            #         vrf_to_delete.delete()
            #         logger.info(f"DELETED VRF: {vrf_name} from {netbox_device.name}")
            # except Exception as e:
            #     logger.error(f"Failed to delete VRF {vrf_name}: {e}")
    
    return vrfs_to_delete

def create_vrf_netbox_on_cisco_ios(netbox_device, netbox_api):
    logger.info(f'START {netbox_device.name} (IOS)')
    
    try:
        net_connect = netmiko_connect(netbox_device, 'cisco_ios')
        if not net_connect:
            return

        output = net_connect.send_command('show run | section vrf')
        
        # ОТЛАДКА для IOS
        logger.debug(f"IOS command output preview: {output[:500]}...")
        
        netmiko_vrfs = parse_output(platform='cisco_ios', command='show run vrf', data=output)
        
        logger.debug(f"IOS parsed VRFs count: {len(netmiko_vrfs) if netmiko_vrfs else 0}")
        
        if not netmiko_vrfs:
            logger.warning(f"No VRFs found on {netbox_device.name}")
            # Если на устройстве нет VRF, проверяем что удалить из NetBox
            synchronize_vrfs([], netbox_device, netbox_api)
            return

        # Синхронизируем VRF (определяем что удалить)
        synchronize_vrfs(netmiko_vrfs, netbox_device, netbox_api)

        # Обрабатываем VRF с устройства
        for netmiko_vrf in netmiko_vrfs:
            try:
                vrf_name = netmiko_vrf.get('name')
                if not vrf_name or vrf_name == 'default':
                    continue

                logger.info(f"Processing VRF '{vrf_name}' on {netbox_device.name}")

                rt_import_values = netmiko_vrf.get('rt_import', [])
                rt_export_values = netmiko_vrf.get('rt_export', [])
                rd_value = netmiko_vrf.get('rd', '')

                create_route_targets(rt_import_values, rt_export_values, netbox_api, netbox_device)

                # Проверяем существующие VRF с тем же именем
                existing_vrfs = list(netbox_api.ipam.vrfs.filter(name=vrf_name, cf_device=netbox_device.id))
                
                # Ищем VRF с нужным RD
                matching_vrf = None
                for existing_vrf in existing_vrfs:
                    if existing_vrf.rd == rd_value:
                        matching_vrf = existing_vrf
                        break
                
                if not matching_vrf:
                    if existing_vrfs:
                        # Есть VRF с тем же именем но другим RD - обновляем RD
                        old_vrf = existing_vrfs[0]
                        logger.info(f"VRF {vrf_name} RD changed: '{old_vrf.rd}' -> '{rd_value}'")
                        try:
                            old_vrf.update({'rd': rd_value})
                            matching_vrf = old_vrf
                        except Exception as update_error:
                            logger.error(f"Failed to update RD for VRF {vrf_name}: {update_error}")
                            continue
                    else:
                        # VRF не существует - создаем новый
                        try:
                            matching_vrf = netbox_api.ipam.vrfs.create(
                                name=vrf_name, rd=rd_value,
                                description=f'discovered from {netbox_device.name}',
                                custom_fields={'device': netbox_device.id}
                            )
                            logger.info(f"VRF {vrf_name} created")
                        except Exception as create_error:
                            logger.error(f"VRF creation failed for {vrf_name}: {create_error}")
                            continue

                netbox_vrf_for_update = matching_vrf
                
                if not netbox_vrf_for_update:
                    logger.error(f"No VRF found for update: {vrf_name}")
                    continue

                update_route_targets(rt_import_values, rt_export_values, netbox_api, netbox_vrf_for_update, False)

            except Exception as vrf_error:
                logger.error(f'VRF processing error for {netbox_device.name}: {vrf_error}')
                logger.error(f'Traceback: {traceback.format_exc()}')

    except Exception as e:
        logger.error(f'Script error for {netbox_device.name}: {e}')
        logger.error(f'Traceback: {traceback.format_exc()}')
    finally:
        try:
            if 'net_connect' in locals():
                net_connect.disconnect()
        except:
            pass
    
    logger.info(f'END {netbox_device.name}')

def create_vrf_netbox_on_cisco_nxos(netbox_device, netbox_api):
    logger.info(f'START {netbox_device.name} (NXOS)')
    try:
        net_connect = netmiko_connect(netbox_device, 'cisco_nxos')
        if not net_connect:
            return

        output = net_connect.send_command('show run | section vrf')
        
        # ОТЛАДКА для NXOS  
        logger.debug(f"NXOS command output preview: {output[:500]}...")
        
        netmiko_vrfs = parse_output(platform='cisco_nxos', command='show run vrf', data=output)
        
        logger.debug(f"NXOS parsed VRFs count: {len(netmiko_vrfs) if netmiko_vrfs else 0}")
        
        if not netmiko_vrfs:
            logger.warning(f"No VRFs found on {netbox_device.name}")
            synchronize_vrfs([], netbox_device, netbox_api)
            return

        # Синхронизируем VRF
        synchronize_vrfs(netmiko_vrfs, netbox_device, netbox_api)

        for netmiko_vrf in netmiko_vrfs:
            try:
                vrf_name = netmiko_vrf.get('name')
                if not vrf_name or vrf_name == 'default':
                    continue

                logger.info(f"Processing VRF '{vrf_name}' on {netbox_device.name}")

                rd_value = netmiko_vrf.get('rd', '')
                evpn_var = True if 'evpn' in netmiko_vrf.get('evpn', '') else False
                rt_import_values = netmiko_vrf.get('rt_import', [])
                rt_export_values = netmiko_vrf.get('rt_export', [])

                create_route_targets(rt_import_values, rt_export_values, netbox_api, netbox_device)

                # Применяем ту же логику что и для IOS
                existing_vrfs = list(netbox_api.ipam.vrfs.filter(name=vrf_name, cf_device=netbox_device.id))
                
                matching_vrf = None
                for existing_vrf in existing_vrfs:
                    if existing_vrf.rd == rd_value:
                        matching_vrf = existing_vrf
                        break
                
                if not matching_vrf:
                    if existing_vrfs:
                        old_vrf = existing_vrfs[0]
                        logger.info(f"VRF {vrf_name} RD changed: '{old_vrf.rd}' -> '{rd_value}'")
                        try:
                            old_vrf.update({'rd': rd_value})
                            matching_vrf = old_vrf
                        except Exception as update_error:
                            logger.error(f"Failed to update RD for VRF {vrf_name}: {update_error}")
                            continue
                    else:
                        try:
                            matching_vrf = netbox_api.ipam.vrfs.create(
                                name=vrf_name, rd=rd_value,
                                description=f'discovered from {netbox_device.name}',
                                custom_fields={'device': netbox_device.id}
                            )
                            logger.info(f"VRF {vrf_name} created")
                        except Exception as create_error:
                            logger.error(f"VRF creation failed for {vrf_name}: {create_error}")
                            continue

                update_route_targets(rt_import_values, rt_export_values, netbox_api, matching_vrf, evpn_var)

            except Exception as vrf_error:
                logger.error(f'NXOS VRF error for {netbox_device.name}: {vrf_error}')

    except Exception as e:
        logger.error(f'NXOS script error for {netbox_device.name}: {e}')
    finally:
        try:
            if 'net_connect' in locals():
                net_connect.disconnect()
        except:
            pass
    
    logger.info(f'END {netbox_device.name}')

def create_vrf_netbox_on_huawei_vrp(netbox_device, netbox_api):
    logger.info(f'START {netbox_device.name} (Huawei)')
    try:
        net_connect = netmiko_connect(netbox_device, 'huawei_vrp')
        if not net_connect:
            return

        # Создание GRT
        public_vrf = netbox_api.ipam.vrfs.get(name='GRT', cf_device=netbox_device.id)
        if not public_vrf:
            netbox_api.ipam.vrfs.create(
                name='GRT', rd='', description=f'discovered from {netbox_device.name}',
                custom_fields={'device': netbox_device.id}
            )

        output = net_connect.send_command('display ip vpn-instance verbose')
        
        # ОТЛАДКА: сохраняем первые 1000 символов вывода
        logger.debug(f"Huawei command output preview: {output[:1000]}...")
        
        netmiko_vrfs = parse_output(platform="huawei_vrp", command="display ip vpn verbose instance", data=output)
        
        # ОТЛАДКА: проверяем результат парсинга
        logger.debug(f"Parsed VRFs count: {len(netmiko_vrfs) if netmiko_vrfs else 0}")
        if netmiko_vrfs:
            logger.debug(f"First parsed VRF: {netmiko_vrfs[0]}")
        else:
            logger.warning(f"Parser returned empty result for {netbox_device.name}")
        
        if not netmiko_vrfs:
            logger.warning(f"No VRFs found on {netbox_device.name}")
            # Для Huawei не синхронизируем GRT, только пользовательские VRF
            user_vrfs = []
            synchronize_vrfs(user_vrfs, netbox_device, netbox_api)
            return

        # Синхронизируем VRF (исключаем GRT из синхронизации)
        user_vrfs = [vrf for vrf in netmiko_vrfs if vrf.get('name') != 'GRT']
        synchronize_vrfs(user_vrfs, netbox_device, netbox_api)

        for parsed_vrf_huawei in netmiko_vrfs:
            try:
                if parsed_vrf_huawei['name'].endswith(','):
                    parsed_vrf_huawei['name'] = parsed_vrf_huawei['name'][:-1]

                parsed_vrf_huawei['rt_import'] = parsed_vrf_huawei['rt_import'].split()
                parsed_vrf_huawei['rt_export'] = parsed_vrf_huawei['rt_export'].split()

                vrf_name = parsed_vrf_huawei.get('name')
                if not vrf_name or vrf_name in ['default', 'GRT']:
                    continue

                logger.info(f"Processing VRF '{vrf_name}' on {netbox_device.name}")

                rd_value = parsed_vrf_huawei.get('rd', '')
                rt_import_values = parsed_vrf_huawei['rt_import']
                rt_export_values = parsed_vrf_huawei['rt_export']

                create_route_targets(rt_import_values, rt_export_values, netbox_api, netbox_device)

                # Применяем ту же логику что и для IOS/NXOS
                existing_vrfs = list(netbox_api.ipam.vrfs.filter(name=vrf_name, cf_device=netbox_device.id))
                
                matching_vrf = None
                for existing_vrf in existing_vrfs:
                    if existing_vrf.rd == rd_value:
                        matching_vrf = existing_vrf
                        break
                
                if not matching_vrf:
                    if existing_vrfs:
                        old_vrf = existing_vrfs[0]
                        logger.info(f"VRF {vrf_name} RD changed: '{old_vrf.rd}' -> '{rd_value}'")
                        try:
                            old_vrf.update({'rd': rd_value})
                            matching_vrf = old_vrf
                        except Exception as update_error:
                            logger.error(f"Failed to update RD for VRF {vrf_name}: {update_error}")
                            continue
                    else:
                        try:
                            matching_vrf = netbox_api.ipam.vrfs.create(
                                name=vrf_name, rd=rd_value,
                                description=f'discovered from {netbox_device.name}',
                                custom_fields={'device': netbox_device.id}
                            )
                            logger.info(f"VRF {vrf_name} created")
                        except Exception as create_error:
                            logger.error(f"VRF creation failed for {vrf_name}: {create_error}")
                            continue

                update_route_targets(rt_import_values, rt_export_values, netbox_api, matching_vrf, False)

            except Exception as vrf_error:
                logger.error(f'Huawei VRF error for {netbox_device.name}: {vrf_error}')

    except Exception as e:
        logger.error(f'Huawei script error for {netbox_device.name}: {e}')
    finally:
        try:
            if 'net_connect' in locals():
                net_connect.disconnect()
        except:
            pass
    
    logger.info(f'END {netbox_device.name}')

def add_vrf_to_netbox_for_one_device(device_name: str):
    start_time = time.time()
    logger.info(f"Starting VRF discovery for: {device_name}")

    try:
        netbox_api = netbox_connection()
        netbox_device = netbox_api.dcim.devices.get(name=device_name.upper())
        
        if not netbox_device or not netbox_device.platform:
            logger.error(f"Device {device_name} not found or no platform")
            return

        platform_name = netbox_device.platform.name
        
        if platform_name in ['Cisco IOS', 'Ruijie RG']:
            create_vrf_netbox_on_cisco_ios(netbox_device, netbox_api)
        elif platform_name == 'Cisco NXOS':
            create_vrf_netbox_on_cisco_nxos(netbox_device, netbox_api)
        elif platform_name == 'Huawei Versatile Routing Platform':
            create_vrf_netbox_on_huawei_vrp(netbox_device, netbox_api)

    except Exception as e:
        logger.error(f"Error processing {device_name}: {e}")
    
    logger.info(f"Completed {device_name} in {time.time() - start_time:.2f}s")

def add_vrf_to_netbox():
    start_time = time.time()
    logger.info("Starting VRF discovery and synchronization")

    try:
        netbox_api = netbox_connection()
        script_devices = []
        netbox_all_devices = netbox_api.dcim.devices.all()
        
        for netbox_device in netbox_all_devices:
            # if netbox_device.name == str('MS-MSK34-9120'):  # Убираем фильтр для всех устройств
            netbox_device_tags = str(netbox_device.tags)
            if 'raif_scripts' in netbox_device_tags:
                script_devices.append(netbox_device)

        logger.info(f"Processing {len(script_devices)} devices")

        with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
            futures = []
            for device in script_devices:
                platform_name = device.platform.name if device.platform else "Unknown"
                
                future = None
                if platform_name == 'Cisco IOS':
                    future = executor.submit(create_vrf_netbox_on_cisco_ios, device, netbox_api)
                elif platform_name == 'Cisco NXOS':
                    future = executor.submit(create_vrf_netbox_on_cisco_nxos, device, netbox_api)
                elif platform_name == 'Huawei Versatile Routing Platform':
                    future = executor.submit(create_vrf_netbox_on_huawei_vrp, device, netbox_api)
                
                if future:
                    futures.append((future, device.name))

            for future, device_name in futures:
                try:
                    future.result()
                except Exception as e:
                    logger.error(f"Failed: {device_name} - {e}")

    except Exception as e:
        logger.error(f"Main error: {e}")

    logger.info(f"VRF synchronization completed in {time.time() - start_time:.2f}s")

if __name__ == "__main__":
    add_vrf_to_netbox()
