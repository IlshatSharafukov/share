import urllib3
import pynautobot
from decouple import config

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')

def get_nautobot_api():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç pynautobot."""
    return pynautobot.api(NAUTOBOT_URL, token=NAUTOBOT_TOKEN, verify=False)

def get_scope_tags(api):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ scope —Ç–µ–≥–∏ –∏–∑ Nautobot."""
    print("Fetching scope tags from Nautobot...")
    
    all_tags = api.extras.tags.all()
    scope_tags = []
    
    for tag in all_tags:
        if tag.name.startswith('scope_'):
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å scope_ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VLAN –≥—Ä—É–ø–ø—ã
            vlan_group_name = tag.name.replace('scope_', '')
            scope_tags.append({
                'tag_name': tag.name,
                'vlan_group_name': vlan_group_name
            })
    
    print(f"Found {len(scope_tags)} scope tags")
    return scope_tags

def get_existing_vlan_groups(api):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ VLAN –≥—Ä—É–ø–ø—ã."""
    print("Fetching existing VLAN groups...")
    
    vlan_groups = api.ipam.vlan_groups.all()
    existing_groups = {group.name: group for group in vlan_groups}
    
    print(f"Found {len(existing_groups)} existing VLAN groups")
    return existing_groups

def create_vlan_groups(api, scope_tags, existing_groups):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ VLAN –≥—Ä—É–ø–ø—ã."""
    print("Creating missing VLAN groups...")
    
    created_groups = []
    skipped_groups = []
    
    for scope_info in scope_tags:
        vlan_group_name = scope_info['vlan_group_name']
        tag_name = scope_info['tag_name']
        
        if vlan_group_name in existing_groups:
            print(f"‚úÖ VLAN group already exists: {vlan_group_name}")
            skipped_groups.append(vlan_group_name)
            continue
        
        try:
            print(f"Creating VLAN group: {vlan_group_name}")
            
            new_group = api.ipam.vlan_groups.create({
                'name': vlan_group_name,
                'description': f'VLAN group for {tag_name} scope devices'
            })
            
            created_groups.append(vlan_group_name)
            print(f"‚úÖ Created VLAN group: {vlan_group_name}")
            
        except Exception as e:
            print(f"‚ùå Failed to create VLAN group {vlan_group_name}: {e}")
    
    return created_groups, skipped_groups

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=== VLAN GROUPS CREATOR ===")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Nautobot
    api = get_nautobot_api()
    
    # –ü–æ–ª—É—á–∞–µ–º scope —Ç–µ–≥–∏
    scope_tags = get_scope_tags(api)
    
    if not scope_tags:
        print("‚ùå No scope tags found! Run the tag sync script first.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ VLAN –≥—Ä—É–ø–ø—ã
    existing_groups = get_existing_vlan_groups(api)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ VLAN –≥—Ä—É–ø–ø—ã
    created_groups, skipped_groups = create_vlan_groups(api, scope_tags, existing_groups)
    
    # –û—Ç—á–µ—Ç
    print(f"\nüìä SUMMARY:")
    print(f"   Total scope tags found: {len(scope_tags)}")
    print(f"   VLAN groups already existed: {len(skipped_groups)}")
    print(f"   VLAN groups created: {len(created_groups)}")
    
    if created_groups:
        print(f"\n‚úÖ Created VLAN groups:")
        for group in created_groups:
            print(f"   ‚Ä¢ {group}")
    
    if skipped_groups:
        print(f"\n‚è≠Ô∏è  Existing VLAN groups (skipped):")
        for group in skipped_groups:
            print(f"   ‚Ä¢ {group}")
    
    print(f"\nüéØ VLAN GROUP MAPPING:")
    print("   Scope Tag ‚Üí VLAN Group")
    for scope_info in scope_tags:
        status = "‚úÖ" if scope_info['vlan_group_name'] in created_groups else "‚è≠Ô∏è"
        print(f"   {scope_info['tag_name']} ‚Üí {scope_info['vlan_group_name']} {status}")
    
    print("\n=== VLAN GROUPS CREATION COMPLETE ===")

if __name__ == "__main__":
    main()
