import re
import urllib3
import pandas as pd
import pynautobot
from decouple import config
from openpyxl import Workbook
from openpyxl.worksheet.datavalidation import DataValidation
from openpyxl.styles import PatternFill
from openpyxl.formatting.rule import CellIsRule

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NAUTOBOT_URL = config('NAUTOBOT_URL')
NAUTOBOT_TOKEN = config('NAUTOBOT_TOKEN')

def get_nautobot_api():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç pynautobot."""
    return pynautobot.api(NAUTOBOT_URL, token=NAUTOBOT_TOKEN, verify=False)

def normalize_tag(tag_value):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–≥: –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä."""
    if not tag_value:
        return None
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    normalized = str(tag_value).strip().replace(' ', '_').upper()
    return normalized

def load_excel_devices(filename="new_devices.xlsx"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Excel —Ç–∞–±–ª–∏—Ü—ã."""
    print(f"Loading devices from {filename}...")
    
    df = pd.read_excel(filename)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
    if len(df.columns) >= 3:
        df.columns = ['Device Name', 'Scope', 'Subscope']
    
    devices = {}
    for _, row in df.iterrows():
        name = row['Device Name']
        if pd.isna(name):
            continue
            
        scope1 = row['Scope'] if not pd.isna(row['Scope']) else None
        scope2 = row['Subscope'] if not pd.isna(row['Subscope']) else None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º scope —Ç–µ–≥–∏ (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ)
        scopes = []
        if scope1:
            normalized_scope1 = normalize_tag(scope1)
            if normalized_scope1:
                scopes.append(f"scope_{normalized_scope1}")
        if scope2:
            normalized_scope2 = normalize_tag(scope2)
            if normalized_scope2:
                scopes.append(f"scope_{normalized_scope2}")
            
        devices[name.upper()] = scopes
    
    print(f"Loaded {len(devices)} devices from Excel")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    if devices:
        print("Examples of tag normalization:")
        for name, tags in list(devices.items())[:3]:
            print(f"  {name}: {tags}")
    
    return devices

def get_nautobot_devices():
    """–ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Nautobot —Å –∏—Ö —Ç–µ–≥–∞–º–∏."""
    print("Fetching devices from Nautobot...")
    
    api = get_nautobot_api()
    devices = list(api.dcim.devices.all())
    
    device_tags = {}
    for device in devices:
        name = device.name.upper()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ scope —Ç–µ–≥–∏
        scope_tags = []
        if device.tags:
            for tag in device.tags:
                tag_name = tag.name if hasattr(tag, 'name') else str(tag)
                if tag_name.startswith('scope_'):
                    scope_tags.append(tag_name)
        
        device_tags[name] = scope_tags
    
    print(f"Fetched {len(device_tags)} devices from Nautobot")
    return device_tags

def compare_devices(excel_devices, nautobot_devices):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Excel –∏ Nautobot."""
    print("\nComparing devices...")
    
    excel_names = set(excel_devices.keys())
    nautobot_names = set(nautobot_devices.keys())
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –≤ Excel
    only_in_excel = excel_names - nautobot_names
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –≤ Nautobot
    only_in_nautobot = nautobot_names - excel_names
    
    # –û–±—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    common_devices = excel_names & nautobot_names
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
    tag_mismatches = {}
    for name in common_devices:
        excel_tags = set(excel_devices[name])
        nautobot_tags = set(nautobot_devices[name])
        
        if excel_tags != nautobot_tags:
            tag_mismatches[name] = {
                'excel_tags': list(excel_tags),
                'nautobot_tags': list(nautobot_tags),
                'missing_in_nautobot': list(excel_tags - nautobot_tags),
                'extra_in_nautobot': list(nautobot_tags - excel_tags)
            }
    
    # –û—Ç—á–µ—Ç
    print(f"\nüìä COMPARISON REPORT:")
    print(f"   Excel devices: {len(excel_names)}")
    print(f"   Nautobot devices: {len(nautobot_names)}")
    print(f"   Common devices: {len(common_devices)}")
    print(f"   Only in Excel: {len(only_in_excel)}")
    print(f"   Only in Nautobot: {len(only_in_nautobot)}")
    print(f"   Tag mismatches: {len(tag_mismatches)}")
    
    return {
        'only_in_excel': only_in_excel,
        'only_in_nautobot': only_in_nautobot,
        'tag_mismatches': tag_mismatches
    }

def create_missing_tags(api, required_tags):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ Nautobot."""
    print("Checking and creating missing tags...")
    
    existing_tags = {tag.name: tag for tag in api.extras.tags.all()}
    created_tags = []
    
    for tag_name in required_tags:
        if tag_name not in existing_tags:
            print(f"Creating tag: {tag_name}")
            try:
                new_tag = api.extras.tags.create({
                    'name': tag_name,
                    'description': f'Scope tag: {tag_name}',
                    'color': '3498db',  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
                    'content_types': ['dcim.device']  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                })
                existing_tags[tag_name] = new_tag
                created_tags.append(tag_name)
                print(f"‚úÖ Created tag: {tag_name}")
            except Exception as e:
                print(f"‚ùå Failed to create tag {tag_name}: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ content_types (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                try:
                    print(f"Trying to create {tag_name} without content_types...")
                    new_tag = api.extras.tags.create({
                        'name': tag_name,
                        'description': f'Scope tag: {tag_name}',
                        'color': '3498db'
                    })
                    existing_tags[tag_name] = new_tag
                    created_tags.append(tag_name)
                    print(f"‚úÖ Created tag {tag_name} (without content_types)")
                except Exception as e2:
                    print(f"‚ùå Completely failed to create tag {tag_name}: {e2}")
    
    print(f"Created {len(created_tags)} new tags")
    return existing_tags

def sync_device_tags(api, device_name, target_tags, existing_tags):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    try:
        device = api.dcim.devices.get(name=device_name)
        if not device:
            print(f"‚ùå Device not found: {device_name}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ scope —Ç–µ–≥–∏
        current_scope_tags = []
        current_other_tags = []
        
        if device.tags:
            for tag in device.tags:
                tag_name = tag.name if hasattr(tag, 'name') else str(tag)
                if tag_name.startswith('scope_'):
                    current_scope_tags.append(tag_name)
                else:
                    current_other_tags.append(tag_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        new_tag_ids = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ù–ï-scope —Ç–µ–≥–∏
        for tag_name in current_other_tags:
            if tag_name in existing_tags:
                new_tag_ids.append(existing_tags[tag_name].id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ scope —Ç–µ–≥–∏
        for tag_name in target_tags:
            if tag_name in existing_tags:
                new_tag_ids.append(existing_tags[tag_name].id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device.tags = new_tag_ids
        device.save()
        
        print(f"‚úÖ Updated tags for {device_name}: {target_tags}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating {device_name}: {e}")
        return False

def sync_all_devices(excel_devices, comparison_result):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    api = get_nautobot_api()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ–≥–∏
    all_required_tags = set()
    for tags in excel_devices.values():
        all_required_tags.update(tags)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
    existing_tags = create_missing_tags(api, all_required_tags)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
    print(f"\nSyncing {len(comparison_result['tag_mismatches'])} devices with tag mismatches...")
    
    success_count = 0
    for device_name, mismatch_info in comparison_result['tag_mismatches'].items():
        target_tags = excel_devices[device_name]
        if sync_device_tags(api, device_name, target_tags, existing_tags):
            success_count += 1
    
    print(f"\n‚úÖ Successfully synced {success_count} devices")

def export_comparison_report(comparison_result, filename="sync_report.xlsx"):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ Excel."""
    print(f"Creating comparison report: {filename}")
    
    wb = Workbook()
    
    # –õ–∏—Å—Ç —Å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ —Ç–µ–≥–æ–≤
    ws_mismatches = wb.active
    ws_mismatches.title = "Tag Mismatches"
    ws_mismatches.append(["Device Name", "Excel Tags (Normalized)", "Nautobot Tags", "Missing in Nautobot", "Extra in Nautobot"])
    
    for device, info in comparison_result['tag_mismatches'].items():
        ws_mismatches.append([
            device,
            ", ".join(info['excel_tags']),
            ", ".join(info['nautobot_tags']),
            ", ".join(info['missing_in_nautobot']),
            ", ".join(info['extra_in_nautobot'])
        ])
    
    # –õ–∏—Å—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Ç–æ–ª—å–∫–æ –≤ Excel
    if comparison_result['only_in_excel']:
        ws_excel = wb.create_sheet("Only in Excel")
        ws_excel.append(["Device Name"])
        for device in comparison_result['only_in_excel']:
            ws_excel.append([device])
    
    # –õ–∏—Å—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Ç–æ–ª—å–∫–æ –≤ Nautobot
    if comparison_result['only_in_nautobot']:
        ws_nautobot = wb.create_sheet("Only in Nautobot")
        ws_nautobot.append(["Device Name"])
        for device in comparison_result['only_in_nautobot']:
            ws_nautobot.append([device])
    
    # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
    ws_normalization = wb.create_sheet("Tag Normalization")
    ws_normalization.append(["Original Tag", "Normalized Tag", "Transformation"])
    
    # –ü—Ä–∏–º–µ—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    normalization_examples = [
        ("PROD 70", "PROD_70", "space ‚Üí underscore"),
        ("PROD D8", "PROD_D8", "space ‚Üí underscore"),
        ("PROD 34", "PROD_34", "space ‚Üí underscore"),
        ("EJP (VPN)", "EJP_(VPN)", "space ‚Üí underscore"),
        ("iDMZ", "IDMZ", "lowercase ‚Üí UPPERCASE"),
        ("OTV", "OTV", "no change"),
        ("BRANCH", "BRANCH", "no change"),
    ]
    
    for original, normalized, transformation in normalization_examples:
        ws_normalization.append([original, f"scope_{normalized}", transformation])
    
    wb.save(filename)
    print(f"Report saved: {filename}")
    print("Report includes tag normalization examples for reference")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=== NAUTOBOT SCOPE TAGS SYNCHRONIZATION ===")
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_devices = load_excel_devices("new_devices.xlsx")
    nautobot_devices = get_nautobot_devices()
    
    # 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    comparison_result = compare_devices(excel_devices, nautobot_devices)
    
    # 3. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    export_comparison_report(comparison_result)
    
    # 4. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
    # sync_all_devices(excel_devices, comparison_result)
    
    print("\n=== SYNCHRONIZATION COMPLETE ===")

if __name__ == "__main__":
    main()
